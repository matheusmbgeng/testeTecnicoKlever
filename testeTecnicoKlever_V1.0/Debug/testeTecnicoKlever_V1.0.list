
testeTecnicoKlever_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006204  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006444  08006444  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800644c  0800644c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800644c  0800644c  0001644c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006450  08006450  00016450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040ac  20000014  08006468  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040c0  08006468  000240c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016165  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033bb  00000000  00000000  000361a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  00039568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  0003a870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018962  00000000  00000000  0003b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001039a  00000000  00000000  00054342  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098b65  00000000  00000000  000646dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd241  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  000fd2bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800638c 	.word	0x0800638c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	0800638c 	.word	0x0800638c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_ADC1_Init+0x98>)
 80004f4:	4a21      	ldr	r2, [pc, #132]	; (800057c <MX_ADC1_Init+0x9c>)
 80004f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_ADC1_Init+0x98>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_ADC1_Init+0x98>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_ADC1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MX_ADC1_Init+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_ADC1_Init+0x98>)
 8000520:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_ADC1_Init+0xa0>)
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_ADC1_Init+0x98>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MX_ADC1_Init+0x98>)
 800052c:	2201      	movs	r2, #1
 800052e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_ADC1_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_ADC1_Init+0x98>)
 800053a:	2201      	movs	r2, #1
 800053c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053e:	480e      	ldr	r0, [pc, #56]	; (8000578 <MX_ADC1_Init+0x98>)
 8000540:	f000 fef8 	bl	8001334 <HAL_ADC_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800054a:	f000 fd39 	bl	8000fc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000552:	2301      	movs	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <MX_ADC1_Init+0x98>)
 8000560:	f001 f864 	bl	800162c <HAL_ADC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800056a:	f000 fd29 	bl	8000fc0 <Error_Handler>
  }

}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20003fd8 	.word	0x20003fd8
 800057c:	40012000 	.word	0x40012000
 8000580:	0f000001 	.word	0x0f000001

08000584 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	; (8000600 <HAL_ADC_MspInit+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d127      	bne.n	80005f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b4:	6453      	str	r3, [r2, #68]	; 0x44
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <HAL_ADC_MspInit+0x84>)
 80005f2:	f001 fb3d 	bl	8001c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	; 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40012000 	.word	0x40012000
 8000604:	40023800 	.word	0x40023800
 8000608:	40020000 	.word	0x40020000

0800060c <SendLeituraADC>:

/*----------------------------------------------------------------------------------------------
SendLeituraADC: Envia a leitura do ADC, recebida pelo parâmetro adcValue. Dado é enviado em formato
Big-Endian. Envia na resposta o comando de leitura de AD.
----------------------------------------------------------------------------------------------*/
void SendLeituraADC(uint32_t adcValue){
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	unsigned char Buffer[8] = {0x01,ADC_CMD_BYTE, 0x04, adcValue >> 24, adcValue >> 16, adcValue >> 8, adcValue, 0x00};
 8000614:	2301      	movs	r3, #1
 8000616:	723b      	strb	r3, [r7, #8]
 8000618:	2341      	movs	r3, #65	; 0x41
 800061a:	727b      	strb	r3, [r7, #9]
 800061c:	2304      	movs	r3, #4
 800061e:	72bb      	strb	r3, [r7, #10]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	0e1b      	lsrs	r3, r3, #24
 8000624:	b2db      	uxtb	r3, r3
 8000626:	72fb      	strb	r3, [r7, #11]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	0c1b      	lsrs	r3, r3, #16
 800062c:	b2db      	uxtb	r3, r3
 800062e:	733b      	strb	r3, [r7, #12]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	0a1b      	lsrs	r3, r3, #8
 8000634:	b2db      	uxtb	r3, r3
 8000636:	737b      	strb	r3, [r7, #13]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	73bb      	strb	r3, [r7, #14]
 800063e:	2300      	movs	r3, #0
 8000640:	73fb      	strb	r3, [r7, #15]
	int16_t CheckSum = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < sizeof(Buffer) - 1; i++){
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	e00c      	b.n	8000666 <SendLeituraADC+0x5a>
		CheckSum += Buffer[i];
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b29a      	uxth	r2, r3
 8000658:	8afb      	ldrh	r3, [r7, #22]
 800065a:	4413      	add	r3, r2
 800065c:	b29b      	uxth	r3, r3
 800065e:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < sizeof(Buffer) - 1; i++){
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	3301      	adds	r3, #1
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	2b06      	cmp	r3, #6
 800066a:	d9ef      	bls.n	800064c <SendLeituraADC+0x40>
	}

	Buffer[7] = CheckSum % 256;
 800066c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000670:	425a      	negs	r2, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	bf58      	it	pl
 8000678:	4253      	negpl	r3, r2
 800067a:	b21b      	sxth	r3, r3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	73fb      	strb	r3, [r7, #15]
	Comm_TX(Buffer, sizeof(Buffer));
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2108      	movs	r1, #8
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f856 	bl	8000738 <Comm_TX>
}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <SendPacoteIncorreto>:
/*----------------------------------------------------------------------------------------------
SendLoopBack: Envia um ACK de pacote fora do padrão. O comando desse ACK é 0xFF.
----------------------------------------------------------------------------------------------*/
void SendPacoteIncorreto(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	unsigned char Buffer[4] = {0x01,FAIL_CMD_BYTE, 0x00, 0x00};
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <SendPacoteIncorreto+0x2c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	607b      	str	r3, [r7, #4]

	Buffer[3] = CalcCheckSum(Buffer, sizeof(Buffer) - 1);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2103      	movs	r1, #3
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f86d 	bl	8000784 <CalcCheckSum>
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	/* Envia pela serial */
	Comm_TX(Buffer, sizeof(Buffer));
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2104      	movs	r1, #4
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f840 	bl	8000738 <Comm_TX>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	080063a4 	.word	0x080063a4

080006c4 <SendLoopBack>:
/*----------------------------------------------------------------------------------------------
SendLoopBack: Envia o loopback pela Serial. Envia o comando serial do protocolo na resposta.
----------------------------------------------------------------------------------------------*/
void SendLoopBack(void){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	unsigned char Buffer[4] = {0x01,SERIAL_CMD_BYTE,0x00, 0x00};
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <SendLoopBack+0x2c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	607b      	str	r3, [r7, #4]

	Buffer[3] = CalcCheckSum(Buffer, sizeof(Buffer) - 1);
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2103      	movs	r1, #3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f855 	bl	8000784 <CalcCheckSum>
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	Comm_TX(Buffer, sizeof(Buffer));
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2104      	movs	r1, #4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f828 	bl	8000738 <Comm_TX>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	080063a8 	.word	0x080063a8

080006f4 <SendACK>:
/*----------------------------------------------------------------------------------------------
SendACK: Envia ACK de acordo com o comando 'cmd' recebido.
----------------------------------------------------------------------------------------------*/
void SendACK(char cmd){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
	/* Envia ACK de acordo com o comando recebido*/
	/* Possui 1 Parâmetro 'S', indicando sucesso na comunicação */
	unsigned char Buffer[5] = {0x01, cmd,0x01,'S', 0x00};
 80006fe:	2301      	movs	r3, #1
 8000700:	723b      	strb	r3, [r7, #8]
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	727b      	strb	r3, [r7, #9]
 8000706:	2301      	movs	r3, #1
 8000708:	72bb      	strb	r3, [r7, #10]
 800070a:	2353      	movs	r3, #83	; 0x53
 800070c:	72fb      	strb	r3, [r7, #11]
 800070e:	2300      	movs	r3, #0
 8000710:	733b      	strb	r3, [r7, #12]

	Buffer[4] = CalcCheckSum(Buffer, sizeof(Buffer) - 1);
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	2104      	movs	r1, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f833 	bl	8000784 <CalcCheckSum>
 800071e:	4603      	mov	r3, r0
 8000720:	733b      	strb	r3, [r7, #12]
	Comm_TX(Buffer, sizeof(Buffer));
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2105      	movs	r1, #5
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f805 	bl	8000738 <Comm_TX>
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <Comm_TX>:
Comm_TX: Função de envio na serial da UART2. Recebe como parâmetro o buffer de dados a ser enviado
e o tamanho do pacote.
----------------------------------------------------------------------------------------------*/

void Comm_TX(unsigned char *s, int bufferSize)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  while(bufferSize)
 8000742:	e013      	b.n	800076c <Comm_TX+0x34>
	{
	  while( !(USART2->SR & 0x00000040) ){}; // Espera ate registrador ficar limpo
 8000744:	bf00      	nop
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <Comm_TX+0x44>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f9      	beq.n	8000746 <Comm_TX+0xe>
		HAL_UART_Transmit(&huart2,s, 1, 0xFFFF);
 8000752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000756:	2201      	movs	r2, #1
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	4809      	ldr	r0, [pc, #36]	; (8000780 <Comm_TX+0x48>)
 800075c:	f002 fb17 	bl	8002d8e <HAL_UART_Transmit>
		s++;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3301      	adds	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
		bufferSize--;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3b01      	subs	r3, #1
 800076a:	603b      	str	r3, [r7, #0]
  while(bufferSize)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1e8      	bne.n	8000744 <Comm_TX+0xc>
	}
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40004400 	.word	0x40004400
 8000780:	2000407c 	.word	0x2000407c

08000784 <CalcCheckSum>:

/*----------------------------------------------------------------------------------------------
CalcCheckSum: Calcula o CheckSum do buffer pacoteDados. Parâmetro dataLen representa a
quantidade de bytes que devem ser somados do buffer. Retorna o byte LSB da soma simples dos bytes.
----------------------------------------------------------------------------------------------*/
char CalcCheckSum(unsigned char * pacoteDados, int dataLen){
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	int16_t CheckSum = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < dataLen; i++){
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	e00b      	b.n	80007b0 <CalcCheckSum+0x2c>
		CheckSum += pacoteDados[i];
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	89fb      	ldrh	r3, [r7, #14]
 80007a4:	4413      	add	r3, r2
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < dataLen; i++){
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	3301      	adds	r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dbef      	blt.n	8000798 <CalcCheckSum+0x14>
	}

	return CheckSum % 256;
 80007b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007bc:	425a      	negs	r2, r3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	bf58      	it	pl
 80007c4:	4253      	negpl	r3, r2
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	b2db      	uxtb	r3, r3
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <MaquinaEstadosUART2>:
/*----------------------------------------------------------------------------------------------
MaquinaEstadosUART2: Máquina de estados que recebe byte a byte da ISR de serial o protocolo
estabelecido. Cada posição do protocolo corresponde a um estado definido no header comm.h.
Recebe como parâmetro um char correspondente ao byte recebido na ISR.
----------------------------------------------------------------------------------------------*/
void MaquinaEstadosUART2(char dado){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]

	switch(UART2Estado){
 80007e2:	4ba1      	ldr	r3, [pc, #644]	; (8000a68 <MaquinaEstadosUART2+0x290>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	f200 8156 	bhi.w	8000a9a <MaquinaEstadosUART2+0x2c2>
 80007ee:	a201      	add	r2, pc, #4	; (adr r2, 80007f4 <MaquinaEstadosUART2+0x1c>)
 80007f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f4:	08000809 	.word	0x08000809
 80007f8:	08000847 	.word	0x08000847
 80007fc:	080008eb 	.word	0x080008eb
 8000800:	080009a9 	.word	0x080009a9
 8000804:	08000a41 	.word	0x08000a41
		case SERIAL_BYTE_INICIO:
			if(dado == 0x01){
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d10e      	bne.n	800082c <MaquinaEstadosUART2+0x54>
				CheckSum+=dado;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	b29a      	uxth	r2, r3
 8000812:	4b96      	ldr	r3, [pc, #600]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 8000814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000818:	b29b      	uxth	r3, r3
 800081a:	4413      	add	r3, r2
 800081c:	b29b      	uxth	r3, r3
 800081e:	b21a      	sxth	r2, r3
 8000820:	4b92      	ldr	r3, [pc, #584]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 8000822:	801a      	strh	r2, [r3, #0]
				UART2Estado = SERIAL_BYTE_COMANDO;
 8000824:	4b90      	ldr	r3, [pc, #576]	; (8000a68 <MaquinaEstadosUART2+0x290>)
 8000826:	2202      	movs	r2, #2
 8000828:	701a      	strb	r2, [r3, #0]
				/* Envia alerta de pacote incorreto para task uart */
				xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
				/* Reinicia a máquina de estados da UART */
				ResetMaquinaEstadosUART2();
			}
			break;
 800082a:	e136      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
				CMDTaskISR = PACOTE_INCORRETO;
 800082c:	4b90      	ldr	r3, [pc, #576]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 800082e:	2206      	movs	r2, #6
 8000830:	701a      	strb	r2, [r3, #0]
				xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
 8000832:	4b90      	ldr	r3, [pc, #576]	; (8000a74 <MaquinaEstadosUART2+0x29c>)
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2300      	movs	r3, #0
 8000838:	2200      	movs	r2, #0
 800083a:	498d      	ldr	r1, [pc, #564]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 800083c:	f003 fcc2 	bl	80041c4 <xQueueGenericSendFromISR>
				ResetMaquinaEstadosUART2();
 8000840:	f000 f934 	bl	8000aac <ResetMaquinaEstadosUART2>
			break;
 8000844:	e129      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
		case SERIAL_BYTE_COMANDO:
			if(dado == LED_CMD_BYTE){
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b4c      	cmp	r3, #76	; 0x4c
 800084a:	d111      	bne.n	8000870 <MaquinaEstadosUART2+0x98>
				CheckSum+=dado;
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b86      	ldr	r3, [pc, #536]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 8000852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000856:	b29b      	uxth	r3, r3
 8000858:	4413      	add	r3, r2
 800085a:	b29b      	uxth	r3, r3
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b83      	ldr	r3, [pc, #524]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 8000860:	801a      	strh	r2, [r3, #0]
				CMDUartISR = CMD_LED;
 8000862:	4b85      	ldr	r3, [pc, #532]	; (8000a78 <MaquinaEstadosUART2+0x2a0>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
				UART2Estado = SERIAL_BYTE_LEN;
 8000868:	4b7f      	ldr	r3, [pc, #508]	; (8000a68 <MaquinaEstadosUART2+0x290>)
 800086a:	2203      	movs	r2, #3
 800086c:	701a      	strb	r2, [r3, #0]
				/* Envia alerta de pacote incorreto para task uart */
				xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
				/* Reinicia a máquina de estados da UART */
				ResetMaquinaEstadosUART2();
			}
		break;
 800086e:	e114      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
			}else if(dado == SERIAL_CMD_BYTE){
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b53      	cmp	r3, #83	; 0x53
 8000874:	d114      	bne.n	80008a0 <MaquinaEstadosUART2+0xc8>
				CheckSum+=dado;
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b7c      	ldr	r3, [pc, #496]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 800087c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000880:	b29b      	uxth	r3, r3
 8000882:	4413      	add	r3, r2
 8000884:	b29b      	uxth	r3, r3
 8000886:	b21a      	sxth	r2, r3
 8000888:	4b78      	ldr	r3, [pc, #480]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 800088a:	801a      	strh	r2, [r3, #0]
				CMDUartISR = CMD_SERIAL;
 800088c:	4b7a      	ldr	r3, [pc, #488]	; (8000a78 <MaquinaEstadosUART2+0x2a0>)
 800088e:	2203      	movs	r2, #3
 8000890:	701a      	strb	r2, [r3, #0]
				CMDTaskISR = LOOP_BACK;
 8000892:	4b77      	ldr	r3, [pc, #476]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 8000894:	2204      	movs	r2, #4
 8000896:	701a      	strb	r2, [r3, #0]
				UART2Estado = SERIAL_BYTE_LEN;
 8000898:	4b73      	ldr	r3, [pc, #460]	; (8000a68 <MaquinaEstadosUART2+0x290>)
 800089a:	2203      	movs	r2, #3
 800089c:	701a      	strb	r2, [r3, #0]
		break;
 800089e:	e0fc      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
			}else if(dado == ADC_CMD_BYTE){
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b41      	cmp	r3, #65	; 0x41
 80008a4:	d114      	bne.n	80008d0 <MaquinaEstadosUART2+0xf8>
				CheckSum+=dado;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	4b70      	ldr	r3, [pc, #448]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 80008ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	4413      	add	r3, r2
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	4b6c      	ldr	r3, [pc, #432]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 80008ba:	801a      	strh	r2, [r3, #0]
				CMDUartISR = CMD_ADC;
 80008bc:	4b6e      	ldr	r3, [pc, #440]	; (8000a78 <MaquinaEstadosUART2+0x2a0>)
 80008be:	2202      	movs	r2, #2
 80008c0:	701a      	strb	r2, [r3, #0]
				CMDTaskISR = LER_AD;
 80008c2:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 80008c4:	2205      	movs	r2, #5
 80008c6:	701a      	strb	r2, [r3, #0]
				UART2Estado = SERIAL_BYTE_LEN;
 80008c8:	4b67      	ldr	r3, [pc, #412]	; (8000a68 <MaquinaEstadosUART2+0x290>)
 80008ca:	2203      	movs	r2, #3
 80008cc:	701a      	strb	r2, [r3, #0]
		break;
 80008ce:	e0e4      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
				CMDTaskISR = PACOTE_INCORRETO;
 80008d0:	4b67      	ldr	r3, [pc, #412]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	701a      	strb	r2, [r3, #0]
				xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
 80008d6:	4b67      	ldr	r3, [pc, #412]	; (8000a74 <MaquinaEstadosUART2+0x29c>)
 80008d8:	6818      	ldr	r0, [r3, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	4964      	ldr	r1, [pc, #400]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 80008e0:	f003 fc70 	bl	80041c4 <xQueueGenericSendFromISR>
				ResetMaquinaEstadosUART2();
 80008e4:	f000 f8e2 	bl	8000aac <ResetMaquinaEstadosUART2>
		break;
 80008e8:	e0d7      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
		case SERIAL_BYTE_LEN:
			ParamLen = dado;
 80008ea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80008ee:	4b63      	ldr	r3, [pc, #396]	; (8000a7c <MaquinaEstadosUART2+0x2a4>)
 80008f0:	701a      	strb	r2, [r3, #0]
			if(ParamLen <= 1){
 80008f2:	4b62      	ldr	r3, [pc, #392]	; (8000a7c <MaquinaEstadosUART2+0x2a4>)
 80008f4:	f993 3000 	ldrsb.w	r3, [r3]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	dc48      	bgt.n	800098e <MaquinaEstadosUART2+0x1b6>
				if(ParamLen > 0){
 80008fc:	4b5f      	ldr	r3, [pc, #380]	; (8000a7c <MaquinaEstadosUART2+0x2a4>)
 80008fe:	f993 3000 	ldrsb.w	r3, [r3]
 8000902:	2b00      	cmp	r3, #0
 8000904:	dd1f      	ble.n	8000946 <MaquinaEstadosUART2+0x16e>
					if(CMDUartISR == CMD_LED){
 8000906:	4b5c      	ldr	r3, [pc, #368]	; (8000a78 <MaquinaEstadosUART2+0x2a0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d10e      	bne.n	800092c <MaquinaEstadosUART2+0x154>
						CheckSum+=dado;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b29a      	uxth	r2, r3
 8000912:	4b56      	ldr	r3, [pc, #344]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 8000914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4413      	add	r3, r2
 800091c:	b29b      	uxth	r3, r3
 800091e:	b21a      	sxth	r2, r3
 8000920:	4b52      	ldr	r3, [pc, #328]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 8000922:	801a      	strh	r2, [r3, #0]
						UART2Estado = SERIAL_BYTE_PARAM;
 8000924:	4b50      	ldr	r3, [pc, #320]	; (8000a68 <MaquinaEstadosUART2+0x290>)
 8000926:	2204      	movs	r2, #4
 8000928:	701a      	strb	r2, [r3, #0]
				/* Envia alerta de pacote incorreto para task uart */
				xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
				/* Reinicia a máquina de estados da UART */
				ResetMaquinaEstadosUART2();
			}
		break;
 800092a:	e0b6      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
						CMDTaskISR = PACOTE_INCORRETO;
 800092c:	4b50      	ldr	r3, [pc, #320]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 800092e:	2206      	movs	r2, #6
 8000930:	701a      	strb	r2, [r3, #0]
						xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
 8000932:	4b50      	ldr	r3, [pc, #320]	; (8000a74 <MaquinaEstadosUART2+0x29c>)
 8000934:	6818      	ldr	r0, [r3, #0]
 8000936:	2300      	movs	r3, #0
 8000938:	2200      	movs	r2, #0
 800093a:	494d      	ldr	r1, [pc, #308]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 800093c:	f003 fc42 	bl	80041c4 <xQueueGenericSendFromISR>
						ResetMaquinaEstadosUART2();
 8000940:	f000 f8b4 	bl	8000aac <ResetMaquinaEstadosUART2>
		break;
 8000944:	e0a9      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
					if(CMDUartISR == CMD_ADC || CMDUartISR == CMD_SERIAL){
 8000946:	4b4c      	ldr	r3, [pc, #304]	; (8000a78 <MaquinaEstadosUART2+0x2a0>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d003      	beq.n	8000956 <MaquinaEstadosUART2+0x17e>
 800094e:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <MaquinaEstadosUART2+0x2a0>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d10e      	bne.n	8000974 <MaquinaEstadosUART2+0x19c>
						CheckSum+=dado;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 800095c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000960:	b29b      	uxth	r3, r3
 8000962:	4413      	add	r3, r2
 8000964:	b29b      	uxth	r3, r3
 8000966:	b21a      	sxth	r2, r3
 8000968:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 800096a:	801a      	strh	r2, [r3, #0]
						UART2Estado = SERIAL_BYTE_CHECKSUM;
 800096c:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <MaquinaEstadosUART2+0x290>)
 800096e:	2205      	movs	r2, #5
 8000970:	701a      	strb	r2, [r3, #0]
		break;
 8000972:	e092      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
						CMDTaskISR = PACOTE_INCORRETO;
 8000974:	4b3e      	ldr	r3, [pc, #248]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 8000976:	2206      	movs	r2, #6
 8000978:	701a      	strb	r2, [r3, #0]
						xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <MaquinaEstadosUART2+0x29c>)
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	2300      	movs	r3, #0
 8000980:	2200      	movs	r2, #0
 8000982:	493b      	ldr	r1, [pc, #236]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 8000984:	f003 fc1e 	bl	80041c4 <xQueueGenericSendFromISR>
						ResetMaquinaEstadosUART2();
 8000988:	f000 f890 	bl	8000aac <ResetMaquinaEstadosUART2>
		break;
 800098c:	e085      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
				CMDTaskISR = PACOTE_INCORRETO;
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 8000990:	2206      	movs	r2, #6
 8000992:	701a      	strb	r2, [r3, #0]
				xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
 8000994:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <MaquinaEstadosUART2+0x29c>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	2300      	movs	r3, #0
 800099a:	2200      	movs	r2, #0
 800099c:	4934      	ldr	r1, [pc, #208]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 800099e:	f003 fc11 	bl	80041c4 <xQueueGenericSendFromISR>
				ResetMaquinaEstadosUART2();
 80009a2:	f000 f883 	bl	8000aac <ResetMaquinaEstadosUART2>
		break;
 80009a6:	e078      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
		case SERIAL_BYTE_PARAM:
			if(dado == 'L'){
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b4c      	cmp	r3, #76	; 0x4c
 80009ac:	d111      	bne.n	80009d2 <MaquinaEstadosUART2+0x1fa>
				CheckSum+=dado;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 80009b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	4413      	add	r3, r2
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b21a      	sxth	r2, r3
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 80009c2:	801a      	strh	r2, [r3, #0]
				CMDTaskISR = LIGAR_LED;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
				UART2Estado = SERIAL_BYTE_CHECKSUM;
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MaquinaEstadosUART2+0x290>)
 80009cc:	2205      	movs	r2, #5
 80009ce:	701a      	strb	r2, [r3, #0]
				/* Envia alerta de pacote incorreto para task uart */
				xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
				/* Reinicia a máquina de estados da UART */
				ResetMaquinaEstadosUART2();
			}
		break;
 80009d0:	e063      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
			}else if(dado == 'D'){
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b44      	cmp	r3, #68	; 0x44
 80009d6:	d111      	bne.n	80009fc <MaquinaEstadosUART2+0x224>
				CheckSum+=dado;
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 80009de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 80009ec:	801a      	strh	r2, [r3, #0]
				CMDTaskISR = DESLIGAR_LED;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	701a      	strb	r2, [r3, #0]
				UART2Estado = SERIAL_BYTE_CHECKSUM;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MaquinaEstadosUART2+0x290>)
 80009f6:	2205      	movs	r2, #5
 80009f8:	701a      	strb	r2, [r3, #0]
		break;
 80009fa:	e04e      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
			}else if(dado == 'T'){
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b54      	cmp	r3, #84	; 0x54
 8000a00:	d111      	bne.n	8000a26 <MaquinaEstadosUART2+0x24e>
				CheckSum+=dado;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4413      	add	r3, r2
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 8000a16:	801a      	strh	r2, [r3, #0]
				CMDTaskISR = TOOGLE_LED;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	701a      	strb	r2, [r3, #0]
				UART2Estado = SERIAL_BYTE_CHECKSUM;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MaquinaEstadosUART2+0x290>)
 8000a20:	2205      	movs	r2, #5
 8000a22:	701a      	strb	r2, [r3, #0]
		break;
 8000a24:	e039      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
				CMDTaskISR = PACOTE_INCORRETO;
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 8000a28:	2206      	movs	r2, #6
 8000a2a:	701a      	strb	r2, [r3, #0]
				xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MaquinaEstadosUART2+0x29c>)
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2200      	movs	r2, #0
 8000a34:	490e      	ldr	r1, [pc, #56]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 8000a36:	f003 fbc5 	bl	80041c4 <xQueueGenericSendFromISR>
				ResetMaquinaEstadosUART2();
 8000a3a:	f000 f837 	bl	8000aac <ResetMaquinaEstadosUART2>
		break;
 8000a3e:	e02c      	b.n	8000a9a <MaquinaEstadosUART2+0x2c2>
		case SERIAL_BYTE_CHECKSUM:
			if(dado == CheckSum % 256){
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MaquinaEstadosUART2+0x294>)
 8000a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a48:	4259      	negs	r1, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	b2c9      	uxtb	r1, r1
 8000a4e:	bf58      	it	pl
 8000a50:	424b      	negpl	r3, r1
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d113      	bne.n	8000a80 <MaquinaEstadosUART2+0x2a8>
				/* Envia comando recebido pela serial e que será tratado na Task */
				xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MaquinaEstadosUART2+0x29c>)
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4903      	ldr	r1, [pc, #12]	; (8000a70 <MaquinaEstadosUART2+0x298>)
 8000a62:	f003 fbaf 	bl	80041c4 <xQueueGenericSendFromISR>
 8000a66:	e015      	b.n	8000a94 <MaquinaEstadosUART2+0x2bc>
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000034 	.word	0x20000034
 8000a70:	20000031 	.word	0x20000031
 8000a74:	20004030 	.word	0x20004030
 8000a78:	20000030 	.word	0x20000030
 8000a7c:	20000032 	.word	0x20000032
			}else{
				CMDTaskISR = PACOTE_INCORRETO;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MaquinaEstadosUART2+0x2cc>)
 8000a82:	2206      	movs	r2, #6
 8000a84:	701a      	strb	r2, [r3, #0]
				/* Envia alerta de pacote incorreto para task uart */
				xQueueSendFromISR(xUartTaskQueue,&CMDTaskISR,NULL);
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MaquinaEstadosUART2+0x2d0>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4905      	ldr	r1, [pc, #20]	; (8000aa4 <MaquinaEstadosUART2+0x2cc>)
 8000a90:	f003 fb98 	bl	80041c4 <xQueueGenericSendFromISR>
			}
			/* Fim de comunicação*/
			/* Reinicia a máquina de estados da UART */
			ResetMaquinaEstadosUART2();
 8000a94:	f000 f80a 	bl	8000aac <ResetMaquinaEstadosUART2>
		break;
 8000a98:	bf00      	nop
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000031 	.word	0x20000031
 8000aa8:	20004030 	.word	0x20004030

08000aac <ResetMaquinaEstadosUART2>:
/*----------------------------------------------------------------------------------------------
ResetMaquinaEstadosUART2: Reinicia os parâmetros da máquina de estados que recebe o pacote
	byte a byte pela interrupção da serial. Função inline para garantir que o compilador
	trate a função como uma continuação de onde foi chamada, pois se trata de uma ISR.
----------------------------------------------------------------------------------------------*/
inline void ResetMaquinaEstadosUART2(void){
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	UART2Estado = SERIAL_BYTE_INICIO;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <ResetMaquinaEstadosUART2+0x28>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
	CMDUartISR= 0;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <ResetMaquinaEstadosUART2+0x2c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
	CMDTaskISR = 0;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <ResetMaquinaEstadosUART2+0x30>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
	CheckSum = 0;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <ResetMaquinaEstadosUART2+0x34>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	801a      	strh	r2, [r3, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000030 	.word	0x20000030
 8000adc:	20000031 	.word	0x20000031
 8000ae0:	20000034 	.word	0x20000034

08000ae4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <vApplicationGetIdleTaskMemory+0x2c>)
 8000af4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <vApplicationGetIdleTaskMemory+0x30>)
 8000afa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000038 	.word	0x20000038
 8000b14:	2000008c 	.word	0x2000008c

08000b18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	b096      	sub	sp, #88	; 0x58
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* Semáforo para compartilhamento da serial entre as tasks */
  xUartSemaphore = xSemaphoreCreateMutex();
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f003 fa3e 	bl	8003fa0 <xQueueCreateMutex>
 8000b24:	4602      	mov	r2, r0
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <MX_FREERTOS_Init+0xa8>)
 8000b28:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* Fila entre ISR e SERIAL_Task */
  xUartTaskQueue = xQueueCreate(5, sizeof(uint8_t));
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	2005      	movs	r0, #5
 8000b30:	f003 f9be 	bl	8003eb0 <xQueueGenericCreate>
 8000b34:	4602      	mov	r2, r0
 8000b36:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <MX_FREERTOS_Init+0xac>)
 8000b38:	601a      	str	r2, [r3, #0]
  /* Fila entre SERIAL_Task e LED_Task */
  xLedTaskQueue = xQueueCreate(5, sizeof(uint8_t));
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	2005      	movs	r0, #5
 8000b40:	f003 f9b6 	bl	8003eb0 <xQueueGenericCreate>
 8000b44:	4602      	mov	r2, r0
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_FREERTOS_Init+0xb0>)
 8000b48:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, ADCTask, osPriorityBelowNormal, 0, 128);
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <MX_FREERTOS_Init+0xb4>)
 8000b4c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b50:	461d      	mov	r5, r3
 8000b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 8000b5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 f826 	bl	8003bb6 <osThreadCreate>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_FREERTOS_Init+0xb8>)
 8000b6e:	601a      	str	r2, [r3, #0]

  /* definition and creation of SERIAL_Task */
  osThreadDef(SERIAL_Task, SerialTask, osPriorityNormal, 0, 128);
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_FREERTOS_Init+0xbc>)
 8000b72:	f107 0420 	add.w	r4, r7, #32
 8000b76:	461d      	mov	r5, r3
 8000b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SERIAL_TaskHandle = osThreadCreate(osThread(SERIAL_Task), NULL);
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 f813 	bl	8003bb6 <osThreadCreate>
 8000b90:	4602      	mov	r2, r0
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_FREERTOS_Init+0xc0>)
 8000b94:	601a      	str	r2, [r3, #0]

  /* definition and creation of LED_Task */
  osThreadDef(LED_Task, LedTask, osPriorityLow, 0, 128);
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_FREERTOS_Init+0xc4>)
 8000b98:	1d3c      	adds	r4, r7, #4
 8000b9a:	461d      	mov	r5, r3
 8000b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 f802 	bl	8003bb6 <osThreadCreate>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_FREERTOS_Init+0xc8>)
 8000bb6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bb8:	bf00      	nop
 8000bba:	3758      	adds	r7, #88	; 0x58
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc0:	20004024 	.word	0x20004024
 8000bc4:	20004030 	.word	0x20004030
 8000bc8:	20004020 	.word	0x20004020
 8000bcc:	080063b8 	.word	0x080063b8
 8000bd0:	2000402c 	.word	0x2000402c
 8000bd4:	080063e0 	.word	0x080063e0
 8000bd8:	20004034 	.word	0x20004034
 8000bdc:	08006408 	.word	0x08006408
 8000be0:	20004028 	.word	0x20004028

08000be4 <ADCTask>:
  * @brief Task responsável pela leitura do canal 0 do ADC 1. Caso a task seja notificada, envia a
  * leitura do ADC pela serial.
  */
/* USER CODE END Header_ADCTask */
void ADCTask(void const * argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADCTask */
  /* Infinite loop */
  for(;;)
  {
	/* Leitura do ADC */
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	4815      	ldr	r0, [pc, #84]	; (8000c48 <ADCTask+0x64>)
 8000bf2:	f000 fc89 	bl	8001508 <HAL_ADC_PollForConversion>
	uint32_t valorAD = HAL_ADC_GetValue(&hadc1);
 8000bf6:	4814      	ldr	r0, [pc, #80]	; (8000c48 <ADCTask+0x64>)
 8000bf8:	f000 fd0a 	bl	8001610 <HAL_ADC_GetValue>
 8000bfc:	6178      	str	r0, [r7, #20]
	/* Checa se a task recebeu notificação. Não perde tempo de execução aguardando a notificação*/
	uint32_t DummyNotification = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
	BaseType_t TaskNotify = xTaskNotifyWait(pdFALSE, pdTRUE, &DummyNotification, 0);
 8000c02:	f107 020c 	add.w	r2, r7, #12
 8000c06:	2300      	movs	r3, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f004 fe00 	bl	8005810 <xTaskNotifyWait>
 8000c10:	6138      	str	r0, [r7, #16]
	if(TaskNotify == pdTRUE){
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d113      	bne.n	8000c40 <ADCTask+0x5c>
		/* Caso tenha recebido a notificação, aguarda o semáforo para enviar o valor pela serial*/
		if(xSemaphoreTake(xUartSemaphore, portMAX_DELAY)){
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <ADCTask+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fc3f 	bl	80044a4 <xQueueSemaphoreTake>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d009      	beq.n	8000c40 <ADCTask+0x5c>
			SendLeituraADC(valorAD);
 8000c2c:	6978      	ldr	r0, [r7, #20]
 8000c2e:	f7ff fced 	bl	800060c <SendLeituraADC>
			xSemaphoreGive(xUartSemaphore);
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <ADCTask+0x68>)
 8000c34:	6818      	ldr	r0, [r3, #0]
 8000c36:	2300      	movs	r3, #0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	f003 f9c8 	bl	8003fd0 <xQueueGenericSend>
		}
	}
    osDelay(100);
 8000c40:	2064      	movs	r0, #100	; 0x64
 8000c42:	f003 f804 	bl	8003c4e <osDelay>
  {
 8000c46:	e7d1      	b.n	8000bec <ADCTask+0x8>
 8000c48:	20003fd8 	.word	0x20003fd8
 8000c4c:	20004024 	.word	0x20004024

08000c50 <SerialTask>:
* Possui a maior prioridade entre as tasks para uma maior rapidez na execução dos comandos
* recebidos pela ISR.
*/
/* USER CODE END Header_SerialTask */
void SerialTask(void const * argument)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SerialTask */
  char CMDUartRcv = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceive(xUartTaskQueue, &CMDUartRcv, portMAX_DELAY)){
 8000c5c:	4b59      	ldr	r3, [pc, #356]	; (8000dc4 <SerialTask+0x174>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f107 010f 	add.w	r1, r7, #15
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 fb3f 	bl	80042ec <xQueueReceive>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f000 80a2 	beq.w	8000dba <SerialTask+0x16a>
		  switch(CMDUartRcv){
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	2b05      	cmp	r3, #5
 8000c7c:	f200 809d 	bhi.w	8000dba <SerialTask+0x16a>
 8000c80:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <SerialTask+0x38>)
 8000c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c86:	bf00      	nop
 8000c88:	08000ca1 	.word	0x08000ca1
 8000c8c:	08000cdd 	.word	0x08000cdd
 8000c90:	08000d19 	.word	0x08000d19
 8000c94:	08000d55 	.word	0x08000d55
 8000c98:	08000d7d 	.word	0x08000d7d
 8000c9c:	08000d8d 	.word	0x08000d8d
		  case LIGAR_LED:
				if(xSemaphoreTake(xUartSemaphore, portMAX_DELAY)){
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <SerialTask+0x178>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f003 fbfb 	bl	80044a4 <xQueueSemaphoreTake>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d009      	beq.n	8000cc8 <SerialTask+0x78>
					SendACK(LED_CMD_BYTE);
 8000cb4:	204c      	movs	r0, #76	; 0x4c
 8000cb6:	f7ff fd1d 	bl	80006f4 <SendACK>
					xSemaphoreGive(xUartSemaphore);
 8000cba:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <SerialTask+0x178>)
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f003 f984 	bl	8003fd0 <xQueueGenericSend>
				}
				xQueueSend(xLedTaskQueue, &CMDUartRcv, portMAX_DELAY);
 8000cc8:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <SerialTask+0x17c>)
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	f107 010f 	add.w	r1, r7, #15
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd6:	f003 f97b 	bl	8003fd0 <xQueueGenericSend>
			  break;
 8000cda:	e06e      	b.n	8000dba <SerialTask+0x16a>
		  case DESLIGAR_LED:
				if(xSemaphoreTake(xUartSemaphore, portMAX_DELAY)){
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <SerialTask+0x178>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fbdd 	bl	80044a4 <xQueueSemaphoreTake>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d009      	beq.n	8000d04 <SerialTask+0xb4>
					SendACK(LED_CMD_BYTE);
 8000cf0:	204c      	movs	r0, #76	; 0x4c
 8000cf2:	f7ff fcff 	bl	80006f4 <SendACK>
					xSemaphoreGive(xUartSemaphore);
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <SerialTask+0x178>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f003 f966 	bl	8003fd0 <xQueueGenericSend>
				}
				xQueueSend(xLedTaskQueue, &CMDUartRcv, portMAX_DELAY);
 8000d04:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <SerialTask+0x17c>)
 8000d06:	6818      	ldr	r0, [r3, #0]
 8000d08:	f107 010f 	add.w	r1, r7, #15
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d12:	f003 f95d 	bl	8003fd0 <xQueueGenericSend>
			  break;
 8000d16:	e050      	b.n	8000dba <SerialTask+0x16a>

		  case TOOGLE_LED:
				if(xSemaphoreTake(xUartSemaphore, portMAX_DELAY)){
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <SerialTask+0x178>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 fbbf 	bl	80044a4 <xQueueSemaphoreTake>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d009      	beq.n	8000d40 <SerialTask+0xf0>
					SendACK(LED_CMD_BYTE);
 8000d2c:	204c      	movs	r0, #76	; 0x4c
 8000d2e:	f7ff fce1 	bl	80006f4 <SendACK>
					xSemaphoreGive(xUartSemaphore);
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <SerialTask+0x178>)
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f003 f948 	bl	8003fd0 <xQueueGenericSend>
				}
				xQueueSend(xLedTaskQueue, &CMDUartRcv, portMAX_DELAY);
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <SerialTask+0x17c>)
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	f107 010f 	add.w	r1, r7, #15
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4e:	f003 f93f 	bl	8003fd0 <xQueueGenericSend>
			  break;
 8000d52:	e032      	b.n	8000dba <SerialTask+0x16a>
		  case LOOP_BACK:
				if(xSemaphoreTake(xUartSemaphore, portMAX_DELAY)){
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <SerialTask+0x178>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fba1 	bl	80044a4 <xQueueSemaphoreTake>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d025      	beq.n	8000db4 <SerialTask+0x164>
					SendLoopBack();
 8000d68:	f7ff fcac 	bl	80006c4 <SendLoopBack>
					xSemaphoreGive(xUartSemaphore);
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <SerialTask+0x178>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	2300      	movs	r3, #0
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	f003 f92b 	bl	8003fd0 <xQueueGenericSend>
				}
			  break;
 8000d7a:	e01b      	b.n	8000db4 <SerialTask+0x164>

		  case LER_AD:
			  /* Notificação recebe valor 0x00 e parâmetro eAction igual a eNoAction
			   * pois não é usado o array de notificação da task. */
			  xTaskNotify(ADC_TaskHandle, 0, eNoAction);
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <SerialTask+0x180>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	2300      	movs	r3, #0
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	f004 fd9d 	bl	80058c4 <xTaskGenericNotify>
			  break;
 8000d8a:	e016      	b.n	8000dba <SerialTask+0x16a>

		  case PACOTE_INCORRETO:
			  	/* Caso o pacote recebido pela ISR esteja fora do padrão do protocolo estabelecido
			  	 * retorna um ACK alertando falha na comunicação */
				if(xSemaphoreTake(xUartSemaphore, portMAX_DELAY)){
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <SerialTask+0x178>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 fb85 	bl	80044a4 <xQueueSemaphoreTake>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00b      	beq.n	8000db8 <SerialTask+0x168>
					SendPacoteIncorreto();
 8000da0:	f7ff fc78 	bl	8000694 <SendPacoteIncorreto>
					xSemaphoreGive(xUartSemaphore);
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <SerialTask+0x178>)
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	2300      	movs	r3, #0
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	f003 f90f 	bl	8003fd0 <xQueueGenericSend>
				}
			  break;
 8000db2:	e001      	b.n	8000db8 <SerialTask+0x168>
			  break;
 8000db4:	bf00      	nop
 8000db6:	e000      	b.n	8000dba <SerialTask+0x16a>
			  break;
 8000db8:	bf00      	nop
		  }
	  }
    osDelay(1);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f002 ff47 	bl	8003c4e <osDelay>
	  if(xQueueReceive(xUartTaskQueue, &CMDUartRcv, portMAX_DELAY)){
 8000dc0:	e74c      	b.n	8000c5c <SerialTask+0xc>
 8000dc2:	bf00      	nop
 8000dc4:	20004030 	.word	0x20004030
 8000dc8:	20004024 	.word	0x20004024
 8000dcc:	20004020 	.word	0x20004020
 8000dd0:	2000402c 	.word	0x2000402c

08000dd4 <LedTask>:
* @brief Task para execução das operações do LED. Recebe a operação através da fila
*  xLedTaskQueue.
*/
/* USER CODE END Header_LedTask */
void LedTask(void const * argument)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask */
	char CMDLedRcv = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceive(xLedTaskQueue,&CMDLedRcv, portMAX_DELAY)){
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <LedTask+0x5c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f107 010f 	add.w	r1, r7, #15
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fa7d 	bl	80042ec <xQueueReceive>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d017      	beq.n	8000e28 <LedTask+0x54>
		  switch(CMDLedRcv){
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d009      	beq.n	8000e12 <LedTask+0x3e>
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d00d      	beq.n	8000e1e <LedTask+0x4a>
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d110      	bne.n	8000e28 <LedTask+0x54>
			  case LIGAR_LED:
				  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2120      	movs	r1, #32
 8000e0a:	480a      	ldr	r0, [pc, #40]	; (8000e34 <LedTask+0x60>)
 8000e0c:	f001 f8b2 	bl	8001f74 <HAL_GPIO_WritePin>
				  break;
 8000e10:	e00a      	b.n	8000e28 <LedTask+0x54>
			  case DESLIGAR_LED:
				  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2120      	movs	r1, #32
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <LedTask+0x60>)
 8000e18:	f001 f8ac 	bl	8001f74 <HAL_GPIO_WritePin>
				  break;
 8000e1c:	e004      	b.n	8000e28 <LedTask+0x54>
			  case TOOGLE_LED:
				  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e1e:	2120      	movs	r1, #32
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <LedTask+0x60>)
 8000e22:	f001 f8c0 	bl	8001fa6 <HAL_GPIO_TogglePin>
				  break;
 8000e26:	bf00      	nop
		  }
	  }
    osDelay(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f002 ff10 	bl	8003c4e <osDelay>
	  if(xQueueReceive(xLedTaskQueue,&CMDLedRcv, portMAX_DELAY)){
 8000e2e:	e7d7      	b.n	8000de0 <LedTask+0xc>
 8000e30:	20004020 	.word	0x20004020
 8000e34:	40020000 	.word	0x40020000

08000e38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <MX_GPIO_Init+0x5c>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <MX_GPIO_Init+0x5c>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_GPIO_Init+0x5c>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2120      	movs	r1, #32
 8000e6c:	480a      	ldr	r0, [pc, #40]	; (8000e98 <MX_GPIO_Init+0x60>)
 8000e6e:	f001 f881 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e72:	2320      	movs	r3, #32
 8000e74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	4619      	mov	r1, r3
 8000e86:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_GPIO_Init+0x60>)
 8000e88:	f000 fef2 	bl	8001c70 <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 fa06 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f81a 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f7ff ffc6 	bl	8000e38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000eac:	f7ff fb18 	bl	80004e0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 f95a 	bl	8001168 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Inicializa interrupção da Serial */
  HAL_UART_Receive_IT(&huart2,&DummyRxConsole, 1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4906      	ldr	r1, [pc, #24]	; (8000ed0 <main+0x34>)
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <main+0x38>)
 8000eba:	f002 f801 	bl	8002ec0 <HAL_UART_Receive_IT>
  /* Inicia ADC */
  HAL_ADC_Start(&hadc1);
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <main+0x3c>)
 8000ec0:	f000 fa7c 	bl	80013bc <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ec4:	f7ff fe28 	bl	8000b18 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ec8:	f002 fe6e 	bl	8003ba8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <main+0x30>
 8000ece:	bf00      	nop
 8000ed0:	20004038 	.word	0x20004038
 8000ed4:	2000407c 	.word	0x2000407c
 8000ed8:	20003fd8 	.word	0x20003fd8

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2230      	movs	r2, #48	; 0x30
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fa45 	bl	800637a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <SystemClock_Config+0xb8>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <SystemClock_Config+0xb8>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <SystemClock_Config+0xb8>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <SystemClock_Config+0xbc>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <SystemClock_Config+0xbc>)
 8000f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <SystemClock_Config+0xbc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f44:	2310      	movs	r3, #16
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 f843 	bl	8001fdc <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f5c:	f000 f830 	bl	8000fc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fa9e 	bl	80024bc <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f86:	f000 f81b 	bl	8000fc0 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	; 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fae:	f000 f9a1 	bl	80012f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <Error_Handler+0x6>

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_MspInit+0x54>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a11      	ldr	r2, [pc, #68]	; (800101c <HAL_MspInit+0x54>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x54>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_MspInit+0x54>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_MspInit+0x54>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_MspInit+0x54>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	210f      	movs	r1, #15
 800100a:	f06f 0001 	mvn.w	r0, #1
 800100e:	f000 fde3 	bl	8001bd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	2019      	movs	r0, #25
 8001036:	f000 fdcf 	bl	8001bd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800103a:	2019      	movs	r0, #25
 800103c:	f000 fde8 	bl	8001c10 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_InitTick+0xa0>)
 8001046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001048:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <HAL_InitTick+0xa0>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6453      	str	r3, [r2, #68]	; 0x44
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_InitTick+0xa0>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800105c:	f107 0210 	add.w	r2, r7, #16
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fbf4 	bl	8002854 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800106c:	f001 fbde 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8001070:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <HAL_InitTick+0xa4>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0c9b      	lsrs	r3, r3, #18
 800107c:	3b01      	subs	r3, #1
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_InitTick+0xa8>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <HAL_InitTick+0xac>)
 8001084:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_InitTick+0xa8>)
 8001088:	f240 32e7 	movw	r2, #999	; 0x3e7
 800108c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_InitTick+0xa8>)
 8001090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001092:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_InitTick+0xa8>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_InitTick+0xa8>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <HAL_InitTick+0xa8>)
 80010a2:	f001 fc09 	bl	80028b8 <HAL_TIM_Base_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d104      	bne.n	80010b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <HAL_InitTick+0xa8>)
 80010ae:	f001 fc38 	bl	8002922 <HAL_TIM_Base_Start_IT>
 80010b2:	4603      	mov	r3, r0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3730      	adds	r7, #48	; 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	431bde83 	.word	0x431bde83
 80010c8:	2000403c 	.word	0x2000403c
 80010cc:	40010000 	.word	0x40010000

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <NMI_Handler+0x4>

080010d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <MemManage_Handler+0x4>

080010e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <UsageFault_Handler+0x4>

080010ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001102:	f001 fc32 	bl	800296a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000403c 	.word	0x2000403c

08001110 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  char	DadoSerial = USART2 -> DR;
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <USART2_IRQHandler+0x24>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	71fb      	strb	r3, [r7, #7]
  MaquinaEstadosUART2(DadoSerial);
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fb5a 	bl	80007d8 <MaquinaEstadosUART2>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <USART2_IRQHandler+0x28>)
 8001126:	f001 ff21 	bl	8002f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40004400 	.word	0x40004400
 8001138:	2000407c 	.word	0x2000407c

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <SystemInit+0x28>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <SystemInit+0x28>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SystemInit+0x28>)
 8001152:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001156:	609a      	str	r2, [r3, #8]
#endif
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_USART2_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f001 fda8 	bl	8002cf4 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f7ff ff09 	bl	8000fc0 <Error_Handler>
  }

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000407c 	.word	0x2000407c
 80011b8:	40004400 	.word	0x40004400

080011bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_UART_MspInit+0x94>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d133      	bne.n	8001246 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_UART_MspInit+0x98>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <HAL_UART_MspInit+0x98>)
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_UART_MspInit+0x98>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_UART_MspInit+0x98>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_UART_MspInit+0x98>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_UART_MspInit+0x98>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001216:	230c      	movs	r3, #12
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001226:	2307      	movs	r3, #7
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <HAL_UART_MspInit+0x9c>)
 8001232:	f000 fd1d 	bl	8001c70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2105      	movs	r1, #5
 800123a:	2026      	movs	r0, #38	; 0x26
 800123c:	f000 fccc 	bl	8001bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001240:	2026      	movs	r0, #38	; 0x26
 8001242:	f000 fce5 	bl	8001c10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40004400 	.word	0x40004400
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001260:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001262:	e003      	b.n	800126c <LoopCopyDataInit>

08001264 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001266:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001268:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800126a:	3104      	adds	r1, #4

0800126c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001270:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001272:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001274:	d3f6      	bcc.n	8001264 <CopyDataInit>
  ldr  r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001278:	e002      	b.n	8001280 <LoopFillZerobss>

0800127a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800127a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800127c:	f842 3b04 	str.w	r3, [r2], #4

08001280 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001282:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001284:	d3f9      	bcc.n	800127a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001286:	f7ff ff59 	bl	800113c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f005 f847 	bl	800631c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fe05 	bl	8000e9c <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001294:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001298:	08006454 	.word	0x08006454
  ldr  r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012a0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80012a4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80012a8:	200040c0 	.word	0x200040c0

080012ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_Init+0x40>)
 80012ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_Init+0x40>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_Init+0x40>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 fc72 	bl	8001bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff fe9e 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fe70 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	2000000c 	.word	0x2000000c
 8001318:	200040bc 	.word	0x200040bc

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200040bc 	.word	0x200040bc

08001334 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e033      	b.n	80013b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff f916 	bl	8000584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	d118      	bne.n	80013a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800137a:	f023 0302 	bic.w	r3, r3, #2
 800137e:	f043 0202 	orr.w	r2, r3, #2
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fa72 	bl	8001870 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
 80013a2:	e001      	b.n	80013a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Start+0x1a>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e08a      	b.n	80014ec <HAL_ADC_Start+0x130>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d018      	beq.n	800141e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013fc:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <HAL_ADC_Start+0x13c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a3e      	ldr	r2, [pc, #248]	; (80014fc <HAL_ADC_Start+0x140>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9a      	lsrs	r2, r3, #18
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001410:	e002      	b.n	8001418 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3b01      	subs	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f9      	bne.n	8001412 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d15e      	bne.n	80014ea <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001456:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146a:	d106      	bne.n	800147a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	f023 0206 	bic.w	r2, r3, #6
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	645a      	str	r2, [r3, #68]	; 0x44
 8001478:	e002      	b.n	8001480 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_ADC_Start+0x144>)
 800148a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001494:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10f      	bne.n	80014c2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11c      	bne.n	80014ea <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	e013      	b.n	80014ea <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_ADC_Start+0x148>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d10e      	bne.n	80014ea <HAL_ADC_Start+0x12e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d107      	bne.n	80014ea <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014e8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	20000004 	.word	0x20000004
 80014fc:	431bde83 	.word	0x431bde83
 8001500:	40012300 	.word	0x40012300
 8001504:	40012000 	.word	0x40012000

08001508 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001524:	d113      	bne.n	800154e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001534:	d10b      	bne.n	800154e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f043 0220 	orr.w	r2, r3, #32
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e05c      	b.n	8001608 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800154e:	f7ff fee5 	bl	800131c <HAL_GetTick>
 8001552:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001554:	e01a      	b.n	800158c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d016      	beq.n	800158c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <HAL_ADC_PollForConversion+0x6c>
 8001564:	f7ff feda 	bl	800131c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d20b      	bcs.n	800158c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f043 0204 	orr.w	r2, r3, #4
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e03d      	b.n	8001608 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b02      	cmp	r3, #2
 8001598:	d1dd      	bne.n	8001556 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f06f 0212 	mvn.w	r2, #18
 80015a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d123      	bne.n	8001606 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d11f      	bne.n	8001606 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d111      	bne.n	8001606 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d105      	bne.n	8001606 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x1c>
 8001644:	2302      	movs	r3, #2
 8001646:	e105      	b.n	8001854 <HAL_ADC_ConfigChannel+0x228>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b09      	cmp	r3, #9
 8001656:	d925      	bls.n	80016a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68d9      	ldr	r1, [r3, #12]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	3b1e      	subs	r3, #30
 800166e:	2207      	movs	r2, #7
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43da      	mvns	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	400a      	ands	r2, r1
 800167c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68d9      	ldr	r1, [r3, #12]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	4603      	mov	r3, r0
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4403      	add	r3, r0
 8001696:	3b1e      	subs	r3, #30
 8001698:	409a      	lsls	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	e022      	b.n	80016ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6919      	ldr	r1, [r3, #16]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	2207      	movs	r2, #7
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	400a      	ands	r2, r1
 80016c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6919      	ldr	r1, [r3, #16]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4403      	add	r3, r0
 80016e0:	409a      	lsls	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d824      	bhi.n	800173c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b05      	subs	r3, #5
 8001704:	221f      	movs	r2, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	400a      	ands	r2, r1
 8001712:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	3b05      	subs	r3, #5
 800172e:	fa00 f203 	lsl.w	r2, r0, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	635a      	str	r2, [r3, #52]	; 0x34
 800173a:	e04c      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d824      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b23      	subs	r3, #35	; 0x23
 8001756:	221f      	movs	r2, #31
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43da      	mvns	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	400a      	ands	r2, r1
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b23      	subs	r3, #35	; 0x23
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
 800178c:	e023      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b41      	subs	r3, #65	; 0x41
 80017a0:	221f      	movs	r2, #31
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	400a      	ands	r2, r1
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b41      	subs	r3, #65	; 0x41
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_ADC_ConfigChannel+0x234>)
 80017d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a21      	ldr	r2, [pc, #132]	; (8001864 <HAL_ADC_ConfigChannel+0x238>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d109      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x1cc>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b12      	cmp	r3, #18
 80017ea:	d105      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a19      	ldr	r2, [pc, #100]	; (8001864 <HAL_ADC_ConfigChannel+0x238>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d123      	bne.n	800184a <HAL_ADC_ConfigChannel+0x21e>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b10      	cmp	r3, #16
 8001808:	d003      	beq.n	8001812 <HAL_ADC_ConfigChannel+0x1e6>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b11      	cmp	r3, #17
 8001810:	d11b      	bne.n	800184a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b10      	cmp	r3, #16
 8001824:	d111      	bne.n	800184a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_ADC_ConfigChannel+0x23c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_ADC_ConfigChannel+0x240>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9a      	lsrs	r2, r3, #18
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800183c:	e002      	b.n	8001844 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40012300 	.word	0x40012300
 8001864:	40012000 	.word	0x40012000
 8001868:	20000004 	.word	0x20000004
 800186c:	431bde83 	.word	0x431bde83

08001870 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001878:	4b79      	ldr	r3, [pc, #484]	; (8001a60 <ADC_Init+0x1f0>)
 800187a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	431a      	orrs	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	021a      	lsls	r2, r3, #8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6899      	ldr	r1, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	4a58      	ldr	r2, [pc, #352]	; (8001a64 <ADC_Init+0x1f4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d022      	beq.n	800194e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001916:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6899      	ldr	r1, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6899      	ldr	r1, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	e00f      	b.n	800196e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800195c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800196c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0202 	bic.w	r2, r2, #2
 800197c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6899      	ldr	r1, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7e1b      	ldrb	r3, [r3, #24]
 8001988:	005a      	lsls	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01b      	beq.n	80019d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	3b01      	subs	r3, #1
 80019c8:	035a      	lsls	r2, r3, #13
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	e007      	b.n	80019e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	051a      	lsls	r2, r3, #20
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6899      	ldr	r1, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a26:	025a      	lsls	r2, r3, #9
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6899      	ldr	r1, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	029a      	lsls	r2, r3, #10
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	609a      	str	r2, [r3, #8]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40012300 	.word	0x40012300
 8001a64:	0f000001 	.word	0x0f000001

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ff4c 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bea:	f7ff ff61 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001bee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	6978      	ldr	r0, [r7, #20]
 8001bf6:	f7ff ffb1 	bl	8001b5c <NVIC_EncodePriority>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff80 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c08:	bf00      	nop
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff54 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d004      	beq.n	8001c4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00c      	b.n	8001c64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2205      	movs	r2, #5
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e159      	b.n	8001f40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	f040 8148 	bne.w	8001f3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d00b      	beq.n	8001cca <HAL_GPIO_Init+0x5a>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cbe:	2b11      	cmp	r3, #17
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d130      	bne.n	8001d2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0xfc>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b12      	cmp	r3, #18
 8001d6a:	d123      	bne.n	8001db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3208      	adds	r2, #8
 8001d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a2 	beq.w	8001f3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b56      	ldr	r3, [pc, #344]	; (8001f54 <HAL_GPIO_Init+0x2e4>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a55      	ldr	r2, [pc, #340]	; (8001f54 <HAL_GPIO_Init+0x2e4>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_GPIO_Init+0x2e4>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e12:	4a51      	ldr	r2, [pc, #324]	; (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a48      	ldr	r2, [pc, #288]	; (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x202>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a47      	ldr	r2, [pc, #284]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x1fe>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a46      	ldr	r2, [pc, #280]	; (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x1fa>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a45      	ldr	r2, [pc, #276]	; (8001f68 <HAL_GPIO_Init+0x2f8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x1f6>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a44      	ldr	r2, [pc, #272]	; (8001f6c <HAL_GPIO_Init+0x2fc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x1f2>
 8001e5e:	2304      	movs	r3, #4
 8001e60:	e008      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e62:	2307      	movs	r3, #7
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e66:	2303      	movs	r3, #3
 8001e68:	e004      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e72:	2300      	movs	r3, #0
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f002 0203 	and.w	r2, r2, #3
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	4093      	lsls	r3, r2
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e84:	4934      	ldr	r1, [pc, #208]	; (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e92:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <HAL_GPIO_Init+0x300>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb6:	4a2e      	ldr	r2, [pc, #184]	; (8001f70 <HAL_GPIO_Init+0x300>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_GPIO_Init+0x300>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee0:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <HAL_GPIO_Init+0x300>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_GPIO_Init+0x300>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f0a:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_GPIO_Init+0x300>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_GPIO_Init+0x300>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f34:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <HAL_GPIO_Init+0x300>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	f67f aea2 	bls.w	8001c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3724      	adds	r7, #36	; 0x24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40013800 	.word	0x40013800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40013c00 	.word	0x40013c00

08001f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
 8001f80:	4613      	mov	r3, r2
 8001f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f84:	787b      	ldrb	r3, [r7, #1]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f90:	e003      	b.n	8001f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	401a      	ands	r2, r3
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d104      	bne.n	8001fca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	041a      	lsls	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e25b      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d075      	beq.n	80020e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ffa:	4ba3      	ldr	r3, [pc, #652]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d00c      	beq.n	8002020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002006:	4ba0      	ldr	r3, [pc, #640]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800200e:	2b08      	cmp	r3, #8
 8002010:	d112      	bne.n	8002038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002012:	4b9d      	ldr	r3, [pc, #628]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800201e:	d10b      	bne.n	8002038 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	4b99      	ldr	r3, [pc, #612]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d05b      	beq.n	80020e4 <HAL_RCC_OscConfig+0x108>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d157      	bne.n	80020e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e236      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002040:	d106      	bne.n	8002050 <HAL_RCC_OscConfig+0x74>
 8002042:	4b91      	ldr	r3, [pc, #580]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a90      	ldr	r2, [pc, #576]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e01d      	b.n	800208c <HAL_RCC_OscConfig+0xb0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x98>
 800205a:	4b8b      	ldr	r3, [pc, #556]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a8a      	ldr	r2, [pc, #552]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b88      	ldr	r3, [pc, #544]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a87      	ldr	r2, [pc, #540]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0xb0>
 8002074:	4b84      	ldr	r3, [pc, #528]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a83      	ldr	r2, [pc, #524]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b81      	ldr	r3, [pc, #516]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a80      	ldr	r2, [pc, #512]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff f942 	bl	800131c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff f93e 	bl	800131c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1fb      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b76      	ldr	r3, [pc, #472]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0xc0>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff f92e 	bl	800131c <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff f92a 	bl	800131c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1e7      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	4b6c      	ldr	r3, [pc, #432]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0xe8>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d063      	beq.n	80021ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020f2:	4b65      	ldr	r3, [pc, #404]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020fe:	4b62      	ldr	r3, [pc, #392]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002106:	2b08      	cmp	r3, #8
 8002108:	d11c      	bne.n	8002144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210a:	4b5f      	ldr	r3, [pc, #380]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d116      	bne.n	8002144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	4b5c      	ldr	r3, [pc, #368]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_RCC_OscConfig+0x152>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e1bb      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212e:	4b56      	ldr	r3, [pc, #344]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4952      	ldr	r1, [pc, #328]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	e03a      	b.n	80021ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214c:	4b4f      	ldr	r3, [pc, #316]	; (800228c <HAL_RCC_OscConfig+0x2b0>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7ff f8e3 	bl	800131c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215a:	f7ff f8df 	bl	800131c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e19c      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	4b46      	ldr	r3, [pc, #280]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b43      	ldr	r3, [pc, #268]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4940      	ldr	r1, [pc, #256]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
 800218c:	e015      	b.n	80021ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b3f      	ldr	r3, [pc, #252]	; (800228c <HAL_RCC_OscConfig+0x2b0>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f8c2 	bl	800131c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff f8be 	bl	800131c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e17b      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4b36      	ldr	r3, [pc, #216]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d030      	beq.n	8002228 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d016      	beq.n	80021fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_OscConfig+0x2b4>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff f8a2 	bl	800131c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff f89e 	bl	800131c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e15b      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x200>
 80021fa:	e015      	b.n	8002228 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0x2b4>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7ff f88b 	bl	800131c <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220a:	f7ff f887 	bl	800131c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e144      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 800221e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a0 	beq.w	8002376 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10f      	bne.n	8002266 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002262:	2301      	movs	r3, #1
 8002264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_OscConfig+0x2b8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d121      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_RCC_OscConfig+0x2b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_RCC_OscConfig+0x2b8>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227e:	f7ff f84d 	bl	800131c <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	e011      	b.n	80022aa <HAL_RCC_OscConfig+0x2ce>
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	42470000 	.word	0x42470000
 8002290:	42470e80 	.word	0x42470e80
 8002294:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002298:	f7ff f840 	bl	800131c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e0fd      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	4b81      	ldr	r3, [pc, #516]	; (80024b0 <HAL_RCC_OscConfig+0x4d4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x2f0>
 80022be:	4b7d      	ldr	r3, [pc, #500]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a7c      	ldr	r2, [pc, #496]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ca:	e01c      	b.n	8002306 <HAL_RCC_OscConfig+0x32a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0x312>
 80022d4:	4b77      	ldr	r3, [pc, #476]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	4a76      	ldr	r2, [pc, #472]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6713      	str	r3, [r2, #112]	; 0x70
 80022e0:	4b74      	ldr	r3, [pc, #464]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	4a73      	ldr	r2, [pc, #460]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6713      	str	r3, [r2, #112]	; 0x70
 80022ec:	e00b      	b.n	8002306 <HAL_RCC_OscConfig+0x32a>
 80022ee:	4b71      	ldr	r3, [pc, #452]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	4a70      	ldr	r2, [pc, #448]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6713      	str	r3, [r2, #112]	; 0x70
 80022fa:	4b6e      	ldr	r3, [pc, #440]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a6d      	ldr	r2, [pc, #436]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d015      	beq.n	800233a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230e:	f7ff f805 	bl	800131c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7ff f801 	bl	800131c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0bc      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ee      	beq.n	8002316 <HAL_RCC_OscConfig+0x33a>
 8002338:	e014      	b.n	8002364 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7fe ffef 	bl	800131c <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe ffeb 	bl	800131c <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0a6      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ee      	bne.n	8002342 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b52      	ldr	r3, [pc, #328]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a51      	ldr	r2, [pc, #324]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8092 	beq.w	80024a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002380:	4b4c      	ldr	r3, [pc, #304]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d05c      	beq.n	8002446 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d141      	bne.n	8002418 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b48      	ldr	r3, [pc, #288]	; (80024b8 <HAL_RCC_OscConfig+0x4dc>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe ffbf 	bl	800131c <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a2:	f7fe ffbb 	bl	800131c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e078      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f0      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	019b      	lsls	r3, r3, #6
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	085b      	lsrs	r3, r3, #1
 80023d8:	3b01      	subs	r3, #1
 80023da:	041b      	lsls	r3, r3, #16
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	061b      	lsls	r3, r3, #24
 80023e4:	4933      	ldr	r1, [pc, #204]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ea:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <HAL_RCC_OscConfig+0x4dc>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe ff94 	bl	800131c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe ff90 	bl	800131c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e04d      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x41c>
 8002416:	e045      	b.n	80024a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <HAL_RCC_OscConfig+0x4dc>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7fe ff7d 	bl	800131c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002426:	f7fe ff79 	bl	800131c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e036      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f0      	bne.n	8002426 <HAL_RCC_OscConfig+0x44a>
 8002444:	e02e      	b.n	80024a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e029      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_RCC_OscConfig+0x4d8>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	429a      	cmp	r2, r3
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d115      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800247a:	4013      	ands	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002480:	4293      	cmp	r3, r2
 8002482:	d10d      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d106      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40007000 	.word	0x40007000
 80024b4:	40023800 	.word	0x40023800
 80024b8:	42470060 	.word	0x42470060

080024bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0cc      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b68      	ldr	r3, [pc, #416]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d90c      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b65      	ldr	r3, [pc, #404]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800251a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d044      	beq.n	80025dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d119      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d003      	beq.n	800257a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	2b03      	cmp	r3, #3
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e067      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f023 0203 	bic.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4934      	ldr	r1, [pc, #208]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ac:	f7fe feb6 	bl	800131c <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7fe feb2 	bl	800131c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e04f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 020c 	and.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1eb      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d20c      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f821 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002646:	4601      	mov	r1, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	fa21 f303 	lsr.w	r3, r1, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fcdc 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00
 8002678:	40023800 	.word	0x40023800
 800267c:	0800642c 	.word	0x0800642c
 8002680:	20000004 	.word	0x20000004
 8002684:	20000008 	.word	0x20000008

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	2300      	movs	r3, #0
 8002698:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800269e:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d007      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x32>
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d008      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x38>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 808d 	bne.w	80027ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b4b      	ldr	r3, [pc, #300]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80026b6:	60bb      	str	r3, [r7, #8]
       break;
 80026b8:	e08c      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ba:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80026bc:	60bb      	str	r3, [r7, #8]
      break;
 80026be:	e089      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c0:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ca:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d023      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d6:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	f04f 0400 	mov.w	r4, #0
 80026e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	ea03 0501 	and.w	r5, r3, r1
 80026ec:	ea04 0602 	and.w	r6, r4, r2
 80026f0:	4a3d      	ldr	r2, [pc, #244]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80026f2:	fb02 f106 	mul.w	r1, r2, r6
 80026f6:	2200      	movs	r2, #0
 80026f8:	fb02 f205 	mul.w	r2, r2, r5
 80026fc:	440a      	add	r2, r1
 80026fe:	493a      	ldr	r1, [pc, #232]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002700:	fba5 0101 	umull	r0, r1, r5, r1
 8002704:	1853      	adds	r3, r2, r1
 8002706:	4619      	mov	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f04f 0400 	mov.w	r4, #0
 800270e:	461a      	mov	r2, r3
 8002710:	4623      	mov	r3, r4
 8002712:	f7fd fd65 	bl	80001e0 <__aeabi_uldivmod>
 8002716:	4603      	mov	r3, r0
 8002718:	460c      	mov	r4, r1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e049      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271e:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	f04f 0400 	mov.w	r4, #0
 8002728:	f240 11ff 	movw	r1, #511	; 0x1ff
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	ea03 0501 	and.w	r5, r3, r1
 8002734:	ea04 0602 	and.w	r6, r4, r2
 8002738:	4629      	mov	r1, r5
 800273a:	4632      	mov	r2, r6
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	f04f 0400 	mov.w	r4, #0
 8002744:	0154      	lsls	r4, r2, #5
 8002746:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800274a:	014b      	lsls	r3, r1, #5
 800274c:	4619      	mov	r1, r3
 800274e:	4622      	mov	r2, r4
 8002750:	1b49      	subs	r1, r1, r5
 8002752:	eb62 0206 	sbc.w	r2, r2, r6
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	f04f 0400 	mov.w	r4, #0
 800275e:	0194      	lsls	r4, r2, #6
 8002760:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002764:	018b      	lsls	r3, r1, #6
 8002766:	1a5b      	subs	r3, r3, r1
 8002768:	eb64 0402 	sbc.w	r4, r4, r2
 800276c:	f04f 0100 	mov.w	r1, #0
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	00e2      	lsls	r2, r4, #3
 8002776:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800277a:	00d9      	lsls	r1, r3, #3
 800277c:	460b      	mov	r3, r1
 800277e:	4614      	mov	r4, r2
 8002780:	195b      	adds	r3, r3, r5
 8002782:	eb44 0406 	adc.w	r4, r4, r6
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	02a2      	lsls	r2, r4, #10
 8002790:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002794:	0299      	lsls	r1, r3, #10
 8002796:	460b      	mov	r3, r1
 8002798:	4614      	mov	r4, r2
 800279a:	4618      	mov	r0, r3
 800279c:	4621      	mov	r1, r4
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f04f 0400 	mov.w	r4, #0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	f7fd fd1a 	bl	80001e0 <__aeabi_uldivmod>
 80027ac:	4603      	mov	r3, r0
 80027ae:	460c      	mov	r4, r1
 80027b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	3301      	adds	r3, #1
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	60bb      	str	r3, [r7, #8]
      break;
 80027cc:	e002      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80027d0:	60bb      	str	r3, [r7, #8]
      break;
 80027d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027d4:	68bb      	ldr	r3, [r7, #8]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	00f42400 	.word	0x00f42400
 80027e8:	017d7840 	.word	0x017d7840

080027ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_RCC_GetHCLKFreq+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000004 	.word	0x20000004

08002804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002808:	f7ff fff0 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 800280c:	4601      	mov	r1, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	0a9b      	lsrs	r3, r3, #10
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4a03      	ldr	r2, [pc, #12]	; (8002828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	0800643c 	.word	0x0800643c

0800282c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002830:	f7ff ffdc 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 8002834:	4601      	mov	r1, r0
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	0b5b      	lsrs	r3, r3, #13
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	4a03      	ldr	r2, [pc, #12]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40023800 	.word	0x40023800
 8002850:	0800643c 	.word	0x0800643c

08002854 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	220f      	movs	r2, #15
 8002862:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0203 	and.w	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_RCC_GetClockConfig+0x5c>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_RCC_GetClockConfig+0x5c>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	08db      	lsrs	r3, r3, #3
 800288e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <HAL_RCC_GetClockConfig+0x60>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 020f 	and.w	r2, r3, #15
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40023c00 	.word	0x40023c00

080028b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e01d      	b.n	8002906 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f815 	bl	800290e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f000 f968 	bl	8002bcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b06      	cmp	r3, #6
 800294a:	d007      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b02      	cmp	r3, #2
 800297e:	d122      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d11b      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f06f 0202 	mvn.w	r2, #2
 8002996:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f8ee 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 80029b2:	e005      	b.n	80029c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f8e0 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8f1 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d122      	bne.n	8002a1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d11b      	bne.n	8002a1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f06f 0204 	mvn.w	r2, #4
 80029ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f8c4 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002a06:	e005      	b.n	8002a14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f8b6 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8c7 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d122      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11b      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0208 	mvn.w	r2, #8
 8002a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2204      	movs	r2, #4
 8002a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f89a 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002a5a:	e005      	b.n	8002a68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f88c 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f89d 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d122      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d11b      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f06f 0210 	mvn.w	r2, #16
 8002a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2208      	movs	r2, #8
 8002a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f870 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002aae:	e005      	b.n	8002abc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f862 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f873 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d10e      	bne.n	8002aee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d107      	bne.n	8002aee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f06f 0201 	mvn.w	r2, #1
 8002ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7fe fa57 	bl	8000f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d10e      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b80      	cmp	r3, #128	; 0x80
 8002b08:	d107      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8e3 	bl	8002ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d10e      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d107      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f838 	bl	8002bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d10e      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d107      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f06f 0220 	mvn.w	r2, #32
 8002b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f8ad 	bl	8002ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <TIM_Base_SetConfig+0xe4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00f      	beq.n	8002c04 <TIM_Base_SetConfig+0x38>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bea:	d00b      	beq.n	8002c04 <TIM_Base_SetConfig+0x38>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a31      	ldr	r2, [pc, #196]	; (8002cb4 <TIM_Base_SetConfig+0xe8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d007      	beq.n	8002c04 <TIM_Base_SetConfig+0x38>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <TIM_Base_SetConfig+0xec>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_Base_SetConfig+0x38>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <TIM_Base_SetConfig+0xf0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d108      	bne.n	8002c16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a25      	ldr	r2, [pc, #148]	; (8002cb0 <TIM_Base_SetConfig+0xe4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01b      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c24:	d017      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <TIM_Base_SetConfig+0xe8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <TIM_Base_SetConfig+0xec>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00f      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <TIM_Base_SetConfig+0xf0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <TIM_Base_SetConfig+0xf4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <TIM_Base_SetConfig+0xf8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <TIM_Base_SetConfig+0xfc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <TIM_Base_SetConfig+0xe4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d103      	bne.n	8002c9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	615a      	str	r2, [r3, #20]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40010000 	.word	0x40010000
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	40000c00 	.word	0x40000c00
 8002cc0:	40014000 	.word	0x40014000
 8002cc4:	40014400 	.word	0x40014400
 8002cc8:	40014800 	.word	0x40014800

08002ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e03f      	b.n	8002d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fa4e 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fba1 	bl	8003480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b088      	sub	sp, #32
 8002d92:	af02      	add	r7, sp, #8
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	f040 8083 	bne.w	8002eb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_UART_Transmit+0x2e>
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e07b      	b.n	8002eb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Transmit+0x40>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e074      	b.n	8002eb8 <HAL_UART_Transmit+0x12a>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2221      	movs	r2, #33	; 0x21
 8002de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fa9a 	bl	800131c <HAL_GetTick>
 8002de8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002dfe:	e042      	b.n	8002e86 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e16:	d122      	bne.n	8002e5e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f9c0 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e042      	b.n	8002eb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e44:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3302      	adds	r3, #2
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	e017      	b.n	8002e86 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	e013      	b.n	8002e86 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f99d 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e01f      	b.n	8002eb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	60ba      	str	r2, [r7, #8]
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1b7      	bne.n	8002e00 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2200      	movs	r2, #0
 8002e98:	2140      	movs	r1, #64	; 0x40
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f984 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e006      	b.n	8002eb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
  }
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d140      	bne.n	8002f5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_UART_Receive_IT+0x26>
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e039      	b.n	8002f5e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Receive_IT+0x38>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e032      	b.n	8002f5e <HAL_UART_Receive_IT+0x9e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	88fa      	ldrh	r2, [r7, #6]
 8002f0a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2222      	movs	r2, #34	; 0x22
 8002f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f36:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0220 	orr.w	r2, r2, #32
 8002f56:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10d      	bne.n	8002fbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_UART_IRQHandler+0x52>
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9e0 	bl	800337c <UART_Receive_IT>
      return;
 8002fbc:	e0d1      	b.n	8003162 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80b0 	beq.w	8003126 <HAL_UART_IRQHandler+0x1ba>
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_UART_IRQHandler+0x70>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80a5 	beq.w	8003126 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_UART_IRQHandler+0x90>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	f043 0201 	orr.w	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_UART_IRQHandler+0xb0>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	f043 0202 	orr.w	r2, r3, #2
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_UART_IRQHandler+0xd0>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003034:	f043 0204 	orr.w	r2, r3, #4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00f      	beq.n	8003066 <HAL_UART_IRQHandler+0xfa>
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <HAL_UART_IRQHandler+0xee>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	f043 0208 	orr.w	r2, r3, #8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d078      	beq.n	8003160 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_UART_IRQHandler+0x11c>
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f97a 	bl	800337c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d102      	bne.n	80030b0 <HAL_UART_IRQHandler+0x144>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d031      	beq.n	8003114 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f8c3 	bl	800323c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d123      	bne.n	800310c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	4a21      	ldr	r2, [pc, #132]	; (8003168 <HAL_UART_IRQHandler+0x1fc>)
 80030e2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe fd9f 	bl	8001c2c <HAL_DMA_Abort_IT>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d016      	beq.n	8003122 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030fe:	4610      	mov	r0, r2
 8003100:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003102:	e00e      	b.n	8003122 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f845 	bl	8003194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310a:	e00a      	b.n	8003122 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f841 	bl	8003194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003112:	e006      	b.n	8003122 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f83d 	bl	8003194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003120:	e01e      	b.n	8003160 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003122:	bf00      	nop
    return;
 8003124:	e01c      	b.n	8003160 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_UART_IRQHandler+0x1d6>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8b0 	bl	80032a0 <UART_Transmit_IT>
    return;
 8003140:	e00f      	b.n	8003162 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_UART_IRQHandler+0x1f6>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f8f8 	bl	800334c <UART_EndTransmit_IT>
    return;
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003160:	bf00      	nop
  }
}
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	08003279 	.word	0x08003279

0800316c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b8:	e02c      	b.n	8003214 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d028      	beq.n	8003214 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031c8:	f7fe f8a8 	bl	800131c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d21d      	bcs.n	8003214 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e00f      	b.n	8003234 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4013      	ands	r3, r2
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	429a      	cmp	r2, r3
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	429a      	cmp	r2, r3
 8003230:	d0c3      	beq.n	80031ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003252:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ff7e 	bl	8003194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b21      	cmp	r3, #33	; 0x21
 80032b2:	d144      	bne.n	800333e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032bc:	d11a      	bne.n	80032f4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	621a      	str	r2, [r3, #32]
 80032e6:	e00e      	b.n	8003306 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]
 80032f2:	e008      	b.n	8003306 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	1c59      	adds	r1, r3, #1
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6211      	str	r1, [r2, #32]
 80032fe:	781a      	ldrb	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29b      	uxth	r3, r3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4619      	mov	r1, r3
 8003314:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003328:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003338:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
  }
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003362:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff fefd 	bl	800316c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b22      	cmp	r3, #34	; 0x22
 800338e:	d171      	bne.n	8003474 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	d123      	bne.n	80033e2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10e      	bne.n	80033c6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	1c9a      	adds	r2, r3, #2
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
 80033c4:	e029      	b.n	800341a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28
 80033e0:	e01b      	b.n	800341a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6858      	ldr	r0, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	1c59      	adds	r1, r3, #1
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6291      	str	r1, [r2, #40]	; 0x28
 80033fa:	b2c2      	uxtb	r2, r0
 80033fc:	701a      	strb	r2, [r3, #0]
 80033fe:	e00c      	b.n	800341a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	1c58      	adds	r0, r3, #1
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	6288      	str	r0, [r1, #40]	; 0x28
 8003412:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29b      	uxth	r3, r3
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4619      	mov	r1, r3
 8003428:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800342a:	2b00      	cmp	r3, #0
 800342c:	d120      	bne.n	8003470 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0220 	bic.w	r2, r2, #32
 800343c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800344c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff fe8a 	bl	8003180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e002      	b.n	8003476 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034c2:	f023 030c 	bic.w	r3, r3, #12
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	68f9      	ldr	r1, [r7, #12]
 80034cc:	430b      	orrs	r3, r1
 80034ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ee:	f040 818b 	bne.w	8003808 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4ac1      	ldr	r2, [pc, #772]	; (80037fc <UART_SetConfig+0x37c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d005      	beq.n	8003508 <UART_SetConfig+0x88>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4abf      	ldr	r2, [pc, #764]	; (8003800 <UART_SetConfig+0x380>)
 8003502:	4293      	cmp	r3, r2
 8003504:	f040 80bd 	bne.w	8003682 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7ff f990 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 800350c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	461d      	mov	r5, r3
 8003512:	f04f 0600 	mov.w	r6, #0
 8003516:	46a8      	mov	r8, r5
 8003518:	46b1      	mov	r9, r6
 800351a:	eb18 0308 	adds.w	r3, r8, r8
 800351e:	eb49 0409 	adc.w	r4, r9, r9
 8003522:	4698      	mov	r8, r3
 8003524:	46a1      	mov	r9, r4
 8003526:	eb18 0805 	adds.w	r8, r8, r5
 800352a:	eb49 0906 	adc.w	r9, r9, r6
 800352e:	f04f 0100 	mov.w	r1, #0
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800353a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800353e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003542:	4688      	mov	r8, r1
 8003544:	4691      	mov	r9, r2
 8003546:	eb18 0005 	adds.w	r0, r8, r5
 800354a:	eb49 0106 	adc.w	r1, r9, r6
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	461d      	mov	r5, r3
 8003554:	f04f 0600 	mov.w	r6, #0
 8003558:	196b      	adds	r3, r5, r5
 800355a:	eb46 0406 	adc.w	r4, r6, r6
 800355e:	461a      	mov	r2, r3
 8003560:	4623      	mov	r3, r4
 8003562:	f7fc fe3d 	bl	80001e0 <__aeabi_uldivmod>
 8003566:	4603      	mov	r3, r0
 8003568:	460c      	mov	r4, r1
 800356a:	461a      	mov	r2, r3
 800356c:	4ba5      	ldr	r3, [pc, #660]	; (8003804 <UART_SetConfig+0x384>)
 800356e:	fba3 2302 	umull	r2, r3, r3, r2
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	461d      	mov	r5, r3
 800357c:	f04f 0600 	mov.w	r6, #0
 8003580:	46a9      	mov	r9, r5
 8003582:	46b2      	mov	sl, r6
 8003584:	eb19 0309 	adds.w	r3, r9, r9
 8003588:	eb4a 040a 	adc.w	r4, sl, sl
 800358c:	4699      	mov	r9, r3
 800358e:	46a2      	mov	sl, r4
 8003590:	eb19 0905 	adds.w	r9, r9, r5
 8003594:	eb4a 0a06 	adc.w	sl, sl, r6
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035ac:	4689      	mov	r9, r1
 80035ae:	4692      	mov	sl, r2
 80035b0:	eb19 0005 	adds.w	r0, r9, r5
 80035b4:	eb4a 0106 	adc.w	r1, sl, r6
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	461d      	mov	r5, r3
 80035be:	f04f 0600 	mov.w	r6, #0
 80035c2:	196b      	adds	r3, r5, r5
 80035c4:	eb46 0406 	adc.w	r4, r6, r6
 80035c8:	461a      	mov	r2, r3
 80035ca:	4623      	mov	r3, r4
 80035cc:	f7fc fe08 	bl	80001e0 <__aeabi_uldivmod>
 80035d0:	4603      	mov	r3, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b8b      	ldr	r3, [pc, #556]	; (8003804 <UART_SetConfig+0x384>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	; 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3332      	adds	r3, #50	; 0x32
 80035ea:	4a86      	ldr	r2, [pc, #536]	; (8003804 <UART_SetConfig+0x384>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035f8:	4498      	add	r8, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	461d      	mov	r5, r3
 80035fe:	f04f 0600 	mov.w	r6, #0
 8003602:	46a9      	mov	r9, r5
 8003604:	46b2      	mov	sl, r6
 8003606:	eb19 0309 	adds.w	r3, r9, r9
 800360a:	eb4a 040a 	adc.w	r4, sl, sl
 800360e:	4699      	mov	r9, r3
 8003610:	46a2      	mov	sl, r4
 8003612:	eb19 0905 	adds.w	r9, r9, r5
 8003616:	eb4a 0a06 	adc.w	sl, sl, r6
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003626:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800362a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800362e:	4689      	mov	r9, r1
 8003630:	4692      	mov	sl, r2
 8003632:	eb19 0005 	adds.w	r0, r9, r5
 8003636:	eb4a 0106 	adc.w	r1, sl, r6
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	461d      	mov	r5, r3
 8003640:	f04f 0600 	mov.w	r6, #0
 8003644:	196b      	adds	r3, r5, r5
 8003646:	eb46 0406 	adc.w	r4, r6, r6
 800364a:	461a      	mov	r2, r3
 800364c:	4623      	mov	r3, r4
 800364e:	f7fc fdc7 	bl	80001e0 <__aeabi_uldivmod>
 8003652:	4603      	mov	r3, r0
 8003654:	460c      	mov	r4, r1
 8003656:	461a      	mov	r2, r3
 8003658:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <UART_SetConfig+0x384>)
 800365a:	fba3 1302 	umull	r1, r3, r3, r2
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2164      	movs	r1, #100	; 0x64
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	3332      	adds	r3, #50	; 0x32
 800366c:	4a65      	ldr	r2, [pc, #404]	; (8003804 <UART_SetConfig+0x384>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	f003 0207 	and.w	r2, r3, #7
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4442      	add	r2, r8
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	e26f      	b.n	8003b62 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003682:	f7ff f8bf 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 8003686:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	461d      	mov	r5, r3
 800368c:	f04f 0600 	mov.w	r6, #0
 8003690:	46a8      	mov	r8, r5
 8003692:	46b1      	mov	r9, r6
 8003694:	eb18 0308 	adds.w	r3, r8, r8
 8003698:	eb49 0409 	adc.w	r4, r9, r9
 800369c:	4698      	mov	r8, r3
 800369e:	46a1      	mov	r9, r4
 80036a0:	eb18 0805 	adds.w	r8, r8, r5
 80036a4:	eb49 0906 	adc.w	r9, r9, r6
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036bc:	4688      	mov	r8, r1
 80036be:	4691      	mov	r9, r2
 80036c0:	eb18 0005 	adds.w	r0, r8, r5
 80036c4:	eb49 0106 	adc.w	r1, r9, r6
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	461d      	mov	r5, r3
 80036ce:	f04f 0600 	mov.w	r6, #0
 80036d2:	196b      	adds	r3, r5, r5
 80036d4:	eb46 0406 	adc.w	r4, r6, r6
 80036d8:	461a      	mov	r2, r3
 80036da:	4623      	mov	r3, r4
 80036dc:	f7fc fd80 	bl	80001e0 <__aeabi_uldivmod>
 80036e0:	4603      	mov	r3, r0
 80036e2:	460c      	mov	r4, r1
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <UART_SetConfig+0x384>)
 80036e8:	fba3 2302 	umull	r2, r3, r3, r2
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	461d      	mov	r5, r3
 80036f6:	f04f 0600 	mov.w	r6, #0
 80036fa:	46a9      	mov	r9, r5
 80036fc:	46b2      	mov	sl, r6
 80036fe:	eb19 0309 	adds.w	r3, r9, r9
 8003702:	eb4a 040a 	adc.w	r4, sl, sl
 8003706:	4699      	mov	r9, r3
 8003708:	46a2      	mov	sl, r4
 800370a:	eb19 0905 	adds.w	r9, r9, r5
 800370e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003712:	f04f 0100 	mov.w	r1, #0
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800371e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003722:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003726:	4689      	mov	r9, r1
 8003728:	4692      	mov	sl, r2
 800372a:	eb19 0005 	adds.w	r0, r9, r5
 800372e:	eb4a 0106 	adc.w	r1, sl, r6
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	461d      	mov	r5, r3
 8003738:	f04f 0600 	mov.w	r6, #0
 800373c:	196b      	adds	r3, r5, r5
 800373e:	eb46 0406 	adc.w	r4, r6, r6
 8003742:	461a      	mov	r2, r3
 8003744:	4623      	mov	r3, r4
 8003746:	f7fc fd4b 	bl	80001e0 <__aeabi_uldivmod>
 800374a:	4603      	mov	r3, r0
 800374c:	460c      	mov	r4, r1
 800374e:	461a      	mov	r2, r3
 8003750:	4b2c      	ldr	r3, [pc, #176]	; (8003804 <UART_SetConfig+0x384>)
 8003752:	fba3 1302 	umull	r1, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2164      	movs	r1, #100	; 0x64
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	3332      	adds	r3, #50	; 0x32
 8003764:	4a27      	ldr	r2, [pc, #156]	; (8003804 <UART_SetConfig+0x384>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003772:	4498      	add	r8, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	461d      	mov	r5, r3
 8003778:	f04f 0600 	mov.w	r6, #0
 800377c:	46a9      	mov	r9, r5
 800377e:	46b2      	mov	sl, r6
 8003780:	eb19 0309 	adds.w	r3, r9, r9
 8003784:	eb4a 040a 	adc.w	r4, sl, sl
 8003788:	4699      	mov	r9, r3
 800378a:	46a2      	mov	sl, r4
 800378c:	eb19 0905 	adds.w	r9, r9, r5
 8003790:	eb4a 0a06 	adc.w	sl, sl, r6
 8003794:	f04f 0100 	mov.w	r1, #0
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037a8:	4689      	mov	r9, r1
 80037aa:	4692      	mov	sl, r2
 80037ac:	eb19 0005 	adds.w	r0, r9, r5
 80037b0:	eb4a 0106 	adc.w	r1, sl, r6
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	461d      	mov	r5, r3
 80037ba:	f04f 0600 	mov.w	r6, #0
 80037be:	196b      	adds	r3, r5, r5
 80037c0:	eb46 0406 	adc.w	r4, r6, r6
 80037c4:	461a      	mov	r2, r3
 80037c6:	4623      	mov	r3, r4
 80037c8:	f7fc fd0a 	bl	80001e0 <__aeabi_uldivmod>
 80037cc:	4603      	mov	r3, r0
 80037ce:	460c      	mov	r4, r1
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <UART_SetConfig+0x384>)
 80037d4:	fba3 1302 	umull	r1, r3, r3, r2
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	2164      	movs	r1, #100	; 0x64
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	3332      	adds	r3, #50	; 0x32
 80037e6:	4a07      	ldr	r2, [pc, #28]	; (8003804 <UART_SetConfig+0x384>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	f003 0207 	and.w	r2, r3, #7
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4442      	add	r2, r8
 80037f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80037fa:	e1b2      	b.n	8003b62 <UART_SetConfig+0x6e2>
 80037fc:	40011000 	.word	0x40011000
 8003800:	40011400 	.word	0x40011400
 8003804:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4ad7      	ldr	r2, [pc, #860]	; (8003b6c <UART_SetConfig+0x6ec>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d005      	beq.n	800381e <UART_SetConfig+0x39e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4ad6      	ldr	r2, [pc, #856]	; (8003b70 <UART_SetConfig+0x6f0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	f040 80d1 	bne.w	80039c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800381e:	f7ff f805 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8003822:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	469a      	mov	sl, r3
 8003828:	f04f 0b00 	mov.w	fp, #0
 800382c:	46d0      	mov	r8, sl
 800382e:	46d9      	mov	r9, fp
 8003830:	eb18 0308 	adds.w	r3, r8, r8
 8003834:	eb49 0409 	adc.w	r4, r9, r9
 8003838:	4698      	mov	r8, r3
 800383a:	46a1      	mov	r9, r4
 800383c:	eb18 080a 	adds.w	r8, r8, sl
 8003840:	eb49 090b 	adc.w	r9, r9, fp
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003850:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003854:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003858:	4688      	mov	r8, r1
 800385a:	4691      	mov	r9, r2
 800385c:	eb1a 0508 	adds.w	r5, sl, r8
 8003860:	eb4b 0609 	adc.w	r6, fp, r9
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4619      	mov	r1, r3
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	f04f 0400 	mov.w	r4, #0
 8003876:	0094      	lsls	r4, r2, #2
 8003878:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800387c:	008b      	lsls	r3, r1, #2
 800387e:	461a      	mov	r2, r3
 8003880:	4623      	mov	r3, r4
 8003882:	4628      	mov	r0, r5
 8003884:	4631      	mov	r1, r6
 8003886:	f7fc fcab 	bl	80001e0 <__aeabi_uldivmod>
 800388a:	4603      	mov	r3, r0
 800388c:	460c      	mov	r4, r1
 800388e:	461a      	mov	r2, r3
 8003890:	4bb8      	ldr	r3, [pc, #736]	; (8003b74 <UART_SetConfig+0x6f4>)
 8003892:	fba3 2302 	umull	r2, r3, r3, r2
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	469b      	mov	fp, r3
 80038a0:	f04f 0c00 	mov.w	ip, #0
 80038a4:	46d9      	mov	r9, fp
 80038a6:	46e2      	mov	sl, ip
 80038a8:	eb19 0309 	adds.w	r3, r9, r9
 80038ac:	eb4a 040a 	adc.w	r4, sl, sl
 80038b0:	4699      	mov	r9, r3
 80038b2:	46a2      	mov	sl, r4
 80038b4:	eb19 090b 	adds.w	r9, r9, fp
 80038b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038bc:	f04f 0100 	mov.w	r1, #0
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038d0:	4689      	mov	r9, r1
 80038d2:	4692      	mov	sl, r2
 80038d4:	eb1b 0509 	adds.w	r5, fp, r9
 80038d8:	eb4c 060a 	adc.w	r6, ip, sl
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4619      	mov	r1, r3
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	f04f 0400 	mov.w	r4, #0
 80038ee:	0094      	lsls	r4, r2, #2
 80038f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038f4:	008b      	lsls	r3, r1, #2
 80038f6:	461a      	mov	r2, r3
 80038f8:	4623      	mov	r3, r4
 80038fa:	4628      	mov	r0, r5
 80038fc:	4631      	mov	r1, r6
 80038fe:	f7fc fc6f 	bl	80001e0 <__aeabi_uldivmod>
 8003902:	4603      	mov	r3, r0
 8003904:	460c      	mov	r4, r1
 8003906:	461a      	mov	r2, r3
 8003908:	4b9a      	ldr	r3, [pc, #616]	; (8003b74 <UART_SetConfig+0x6f4>)
 800390a:	fba3 1302 	umull	r1, r3, r3, r2
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2164      	movs	r1, #100	; 0x64
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	3332      	adds	r3, #50	; 0x32
 800391c:	4a95      	ldr	r2, [pc, #596]	; (8003b74 <UART_SetConfig+0x6f4>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003928:	4498      	add	r8, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	469b      	mov	fp, r3
 800392e:	f04f 0c00 	mov.w	ip, #0
 8003932:	46d9      	mov	r9, fp
 8003934:	46e2      	mov	sl, ip
 8003936:	eb19 0309 	adds.w	r3, r9, r9
 800393a:	eb4a 040a 	adc.w	r4, sl, sl
 800393e:	4699      	mov	r9, r3
 8003940:	46a2      	mov	sl, r4
 8003942:	eb19 090b 	adds.w	r9, r9, fp
 8003946:	eb4a 0a0c 	adc.w	sl, sl, ip
 800394a:	f04f 0100 	mov.w	r1, #0
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003956:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800395a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800395e:	4689      	mov	r9, r1
 8003960:	4692      	mov	sl, r2
 8003962:	eb1b 0509 	adds.w	r5, fp, r9
 8003966:	eb4c 060a 	adc.w	r6, ip, sl
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4619      	mov	r1, r3
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	f04f 0400 	mov.w	r4, #0
 800397c:	0094      	lsls	r4, r2, #2
 800397e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003982:	008b      	lsls	r3, r1, #2
 8003984:	461a      	mov	r2, r3
 8003986:	4623      	mov	r3, r4
 8003988:	4628      	mov	r0, r5
 800398a:	4631      	mov	r1, r6
 800398c:	f7fc fc28 	bl	80001e0 <__aeabi_uldivmod>
 8003990:	4603      	mov	r3, r0
 8003992:	460c      	mov	r4, r1
 8003994:	461a      	mov	r2, r3
 8003996:	4b77      	ldr	r3, [pc, #476]	; (8003b74 <UART_SetConfig+0x6f4>)
 8003998:	fba3 1302 	umull	r1, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	2164      	movs	r1, #100	; 0x64
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	3332      	adds	r3, #50	; 0x32
 80039aa:	4a72      	ldr	r2, [pc, #456]	; (8003b74 <UART_SetConfig+0x6f4>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	f003 020f 	and.w	r2, r3, #15
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4442      	add	r2, r8
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	e0d0      	b.n	8003b62 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80039c0:	f7fe ff20 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 80039c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	469a      	mov	sl, r3
 80039ca:	f04f 0b00 	mov.w	fp, #0
 80039ce:	46d0      	mov	r8, sl
 80039d0:	46d9      	mov	r9, fp
 80039d2:	eb18 0308 	adds.w	r3, r8, r8
 80039d6:	eb49 0409 	adc.w	r4, r9, r9
 80039da:	4698      	mov	r8, r3
 80039dc:	46a1      	mov	r9, r4
 80039de:	eb18 080a 	adds.w	r8, r8, sl
 80039e2:	eb49 090b 	adc.w	r9, r9, fp
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039fa:	4688      	mov	r8, r1
 80039fc:	4691      	mov	r9, r2
 80039fe:	eb1a 0508 	adds.w	r5, sl, r8
 8003a02:	eb4b 0609 	adc.w	r6, fp, r9
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	f04f 0400 	mov.w	r4, #0
 8003a18:	0094      	lsls	r4, r2, #2
 8003a1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a1e:	008b      	lsls	r3, r1, #2
 8003a20:	461a      	mov	r2, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	4628      	mov	r0, r5
 8003a26:	4631      	mov	r1, r6
 8003a28:	f7fc fbda 	bl	80001e0 <__aeabi_uldivmod>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	460c      	mov	r4, r1
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <UART_SetConfig+0x6f4>)
 8003a34:	fba3 2302 	umull	r2, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	469b      	mov	fp, r3
 8003a42:	f04f 0c00 	mov.w	ip, #0
 8003a46:	46d9      	mov	r9, fp
 8003a48:	46e2      	mov	sl, ip
 8003a4a:	eb19 0309 	adds.w	r3, r9, r9
 8003a4e:	eb4a 040a 	adc.w	r4, sl, sl
 8003a52:	4699      	mov	r9, r3
 8003a54:	46a2      	mov	sl, r4
 8003a56:	eb19 090b 	adds.w	r9, r9, fp
 8003a5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a72:	4689      	mov	r9, r1
 8003a74:	4692      	mov	sl, r2
 8003a76:	eb1b 0509 	adds.w	r5, fp, r9
 8003a7a:	eb4c 060a 	adc.w	r6, ip, sl
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4619      	mov	r1, r3
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	f04f 0400 	mov.w	r4, #0
 8003a90:	0094      	lsls	r4, r2, #2
 8003a92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a96:	008b      	lsls	r3, r1, #2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	f7fc fb9e 	bl	80001e0 <__aeabi_uldivmod>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <UART_SetConfig+0x6f4>)
 8003aac:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	2164      	movs	r1, #100	; 0x64
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	3332      	adds	r3, #50	; 0x32
 8003abe:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <UART_SetConfig+0x6f4>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aca:	4498      	add	r8, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	469b      	mov	fp, r3
 8003ad0:	f04f 0c00 	mov.w	ip, #0
 8003ad4:	46d9      	mov	r9, fp
 8003ad6:	46e2      	mov	sl, ip
 8003ad8:	eb19 0309 	adds.w	r3, r9, r9
 8003adc:	eb4a 040a 	adc.w	r4, sl, sl
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	46a2      	mov	sl, r4
 8003ae4:	eb19 090b 	adds.w	r9, r9, fp
 8003ae8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003af8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003afc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b00:	4689      	mov	r9, r1
 8003b02:	4692      	mov	sl, r2
 8003b04:	eb1b 0509 	adds.w	r5, fp, r9
 8003b08:	eb4c 060a 	adc.w	r6, ip, sl
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4619      	mov	r1, r3
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	f04f 0400 	mov.w	r4, #0
 8003b1e:	0094      	lsls	r4, r2, #2
 8003b20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b24:	008b      	lsls	r3, r1, #2
 8003b26:	461a      	mov	r2, r3
 8003b28:	4623      	mov	r3, r4
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	f7fc fb57 	bl	80001e0 <__aeabi_uldivmod>
 8003b32:	4603      	mov	r3, r0
 8003b34:	460c      	mov	r4, r1
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <UART_SetConfig+0x6f4>)
 8003b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2164      	movs	r1, #100	; 0x64
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	3332      	adds	r3, #50	; 0x32
 8003b4c:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <UART_SetConfig+0x6f4>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	f003 020f 	and.w	r2, r3, #15
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4442      	add	r2, r8
 8003b5e:	609a      	str	r2, [r3, #8]
}
 8003b60:	e7ff      	b.n	8003b62 <UART_SetConfig+0x6e2>
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6c:	40011000 	.word	0x40011000
 8003b70:	40011400 	.word	0x40011400
 8003b74:	51eb851f 	.word	0x51eb851f

08003b78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b8a:	2b84      	cmp	r3, #132	; 0x84
 8003b8c:	d005      	beq.n	8003b9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4413      	add	r3, r2
 8003b96:	3303      	adds	r3, #3
 8003b98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003bac:	f001 f86e 	bl	8004c8c <vTaskStartScheduler>
  
  return osOK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003bb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb8:	b089      	sub	sp, #36	; 0x24
 8003bba:	af04      	add	r7, sp, #16
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d020      	beq.n	8003c0a <osThreadCreate+0x54>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01c      	beq.n	8003c0a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685c      	ldr	r4, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681d      	ldr	r5, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691e      	ldr	r6, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ffc8 	bl	8003b78 <makeFreeRtosPriority>
 8003be8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bf2:	9202      	str	r2, [sp, #8]
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	9100      	str	r1, [sp, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4632      	mov	r2, r6
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f000 fe80 	bl	8004904 <xTaskCreateStatic>
 8003c04:	4603      	mov	r3, r0
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e01c      	b.n	8003c44 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685c      	ldr	r4, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c16:	b29e      	uxth	r6, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff ffaa 	bl	8003b78 <makeFreeRtosPriority>
 8003c24:	4602      	mov	r2, r0
 8003c26:	f107 030c 	add.w	r3, r7, #12
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	9200      	str	r2, [sp, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	4632      	mov	r2, r6
 8003c32:	4629      	mov	r1, r5
 8003c34:	4620      	mov	r0, r4
 8003c36:	f000 febf 	bl	80049b8 <xTaskCreate>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d001      	beq.n	8003c44 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e000      	b.n	8003c46 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c44:	68fb      	ldr	r3, [r7, #12]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <osDelay+0x16>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	e000      	b.n	8003c66 <osDelay+0x18>
 8003c64:	2301      	movs	r3, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 ffdc 	bl	8004c24 <vTaskDelay>
  
  return osOK;
 8003c6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f103 0208 	add.w	r2, r3, #8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f103 0208 	add.w	r2, r3, #8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f103 0208 	add.w	r2, r3, #8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	d103      	bne.n	8003d38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	e00c      	b.n	8003d52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e002      	b.n	8003d46 <vListInsert+0x2e>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d2f6      	bcs.n	8003d40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	601a      	str	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6892      	ldr	r2, [r2, #8]
 8003da0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6852      	ldr	r2, [r2, #4]
 8003daa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d103      	bne.n	8003dbe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1e5a      	subs	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	e7fe      	b.n	8003e06 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003e08:	f001 ff98 	bl	8005d3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	441a      	add	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	441a      	add	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	22ff      	movs	r2, #255	; 0xff
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	22ff      	movs	r2, #255	; 0xff
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d114      	bne.n	8003e88 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01a      	beq.n	8003e9c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3310      	adds	r3, #16
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 f94c 	bl	8005108 <xTaskRemoveFromEventList>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d012      	beq.n	8003e9c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <xQueueGenericReset+0xcc>)
 8003e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	e009      	b.n	8003e9c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3310      	adds	r3, #16
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fef2 	bl	8003c76 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3324      	adds	r3, #36	; 0x24
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff feed 	bl	8003c76 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e9c:	f001 ff7c 	bl	8005d98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ea0:	2301      	movs	r3, #1
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	e000ed04 	.word	0xe000ed04

08003eb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <xQueueGenericCreate+0x28>
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	e7fe      	b.n	8003ed6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	e004      	b.n	8003eee <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3348      	adds	r3, #72	; 0x48
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f002 f83c 	bl	8005f70 <pvPortMalloc>
 8003ef8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d011      	beq.n	8003f24 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	3348      	adds	r3, #72	; 0x48
 8003f08:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f12:	79fa      	ldrb	r2, [r7, #7]
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f805 	bl	8003f2e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f24:	69bb      	ldr	r3, [r7, #24]
	}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e002      	b.n	8003f50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	69b8      	ldr	r0, [r7, #24]
 8003f60:	f7ff ff3e 	bl	8003de0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00e      	beq.n	8003f98 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2100      	movs	r1, #0
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f81c 	bl	8003fd0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003faa:	2301      	movs	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6939      	ldr	r1, [r7, #16]
 8003fb8:	6978      	ldr	r0, [r7, #20]
 8003fba:	f7ff ff79 	bl	8003eb0 <xQueueGenericCreate>
 8003fbe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff ffd3 	bl	8003f6c <prvInitialiseMutex>

		return xNewQueue;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
	}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08e      	sub	sp, #56	; 0x38
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <xQueueGenericSend+0x30>
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffe:	e7fe      	b.n	8003ffe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <xQueueGenericSend+0x3e>
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <xQueueGenericSend+0x42>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <xQueueGenericSend+0x44>
 8004012:	2300      	movs	r3, #0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <xQueueGenericSend+0x5c>
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
 800402a:	e7fe      	b.n	800402a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d103      	bne.n	800403a <xQueueGenericSend+0x6a>
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <xQueueGenericSend+0x6e>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <xQueueGenericSend+0x70>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <xQueueGenericSend+0x88>
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	623b      	str	r3, [r7, #32]
 8004056:	e7fe      	b.n	8004056 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004058:	f001 fa0c 	bl	8005474 <xTaskGetSchedulerState>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <xQueueGenericSend+0x98>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <xQueueGenericSend+0x9c>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <xQueueGenericSend+0x9e>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <xQueueGenericSend+0xb6>
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	e7fe      	b.n	8004084 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004086:	f001 fe59 	bl	8005d3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <xQueueGenericSend+0xcc>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d129      	bne.n	80040f0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040a2:	f000 fb1f 	bl	80046e4 <prvCopyDataToQueue>
 80040a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	3324      	adds	r3, #36	; 0x24
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 f827 	bl	8005108 <xTaskRemoveFromEventList>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d013      	beq.n	80040e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040c0:	4b3f      	ldr	r3, [pc, #252]	; (80041c0 <xQueueGenericSend+0x1f0>)
 80040c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	e00a      	b.n	80040e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040d8:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <xQueueGenericSend+0x1f0>)
 80040da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040e8:	f001 fe56 	bl	8005d98 <vPortExitCritical>
				return pdPASS;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e063      	b.n	80041b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d103      	bne.n	80040fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040f6:	f001 fe4f 	bl	8005d98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e05c      	b.n	80041b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	4618      	mov	r0, r3
 800410a:	f001 f85f 	bl	80051cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800410e:	2301      	movs	r3, #1
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004112:	f001 fe41 	bl	8005d98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004116:	f000 fe17 	bl	8004d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800411a:	f001 fe0f 	bl	8005d3c <vPortEnterCritical>
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004124:	b25b      	sxtb	r3, r3
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d103      	bne.n	8004134 <xQueueGenericSend+0x164>
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800413a:	b25b      	sxtb	r3, r3
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d103      	bne.n	800414a <xQueueGenericSend+0x17a>
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800414a:	f001 fe25 	bl	8005d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800414e:	1d3a      	adds	r2, r7, #4
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f001 f84e 	bl	80051f8 <xTaskCheckForTimeOut>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d124      	bne.n	80041ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004164:	f000 fbb6 	bl	80048d4 <prvIsQueueFull>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d018      	beq.n	80041a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	3310      	adds	r3, #16
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4611      	mov	r1, r2
 8004176:	4618      	mov	r0, r3
 8004178:	f000 ffa2 	bl	80050c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800417c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800417e:	f000 fb41 	bl	8004804 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004182:	f000 fdef 	bl	8004d64 <xTaskResumeAll>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	f47f af7c 	bne.w	8004086 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <xQueueGenericSend+0x1f0>)
 8004190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	e772      	b.n	8004086 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041a2:	f000 fb2f 	bl	8004804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041a6:	f000 fddd 	bl	8004d64 <xTaskResumeAll>
 80041aa:	e76c      	b.n	8004086 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ae:	f000 fb29 	bl	8004804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041b2:	f000 fdd7 	bl	8004d64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3738      	adds	r7, #56	; 0x38
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	e000ed04 	.word	0xe000ed04

080041c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08e      	sub	sp, #56	; 0x38
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <xQueueGenericSendFromISR+0x2c>
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
 80041ee:	e7fe      	b.n	80041ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <xQueueGenericSendFromISR+0x3a>
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <xQueueGenericSendFromISR+0x3e>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <xQueueGenericSendFromISR+0x40>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <xQueueGenericSendFromISR+0x58>
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	623b      	str	r3, [r7, #32]
 800421a:	e7fe      	b.n	800421a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d103      	bne.n	800422a <xQueueGenericSendFromISR+0x66>
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <xQueueGenericSendFromISR+0x6a>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <xQueueGenericSendFromISR+0x6c>
 800422e:	2300      	movs	r3, #0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <xQueueGenericSendFromISR+0x84>
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	e7fe      	b.n	8004246 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004248:	f001 fe54 	bl	8005ef4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800424c:	f3ef 8211 	mrs	r2, BASEPRI
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	61ba      	str	r2, [r7, #24]
 8004262:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004264:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004266:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	429a      	cmp	r2, r3
 8004272:	d302      	bcc.n	800427a <xQueueGenericSendFromISR+0xb6>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d12c      	bne.n	80042d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800428a:	f000 fa2b 	bl	80046e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800428e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d112      	bne.n	80042be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	d016      	beq.n	80042ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	3324      	adds	r3, #36	; 0x24
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 ff2f 	bl	8005108 <xTaskRemoveFromEventList>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00e      	beq.n	80042ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e007      	b.n	80042ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042c2:	3301      	adds	r3, #1
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	b25a      	sxtb	r2, r3
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042ce:	2301      	movs	r3, #1
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80042d2:	e001      	b.n	80042d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	637b      	str	r3, [r7, #52]	; 0x34
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3738      	adds	r7, #56	; 0x38
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	; 0x30
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <xQueueReceive+0x2e>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	e7fe      	b.n	8004318 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <xQueueReceive+0x3c>
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <xQueueReceive+0x40>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <xQueueReceive+0x42>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <xQueueReceive+0x5a>
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	e7fe      	b.n	8004344 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004346:	f001 f895 	bl	8005474 <xTaskGetSchedulerState>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <xQueueReceive+0x6a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <xQueueReceive+0x6e>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <xQueueReceive+0x70>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <xQueueReceive+0x88>
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	e7fe      	b.n	8004372 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004374:	f001 fce2 	bl	8005d3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01f      	beq.n	80043c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004388:	f000 fa16 	bl	80047b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	1e5a      	subs	r2, r3, #1
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00f      	beq.n	80043bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	3310      	adds	r3, #16
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 feb1 	bl	8005108 <xTaskRemoveFromEventList>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043ac:	4b3c      	ldr	r3, [pc, #240]	; (80044a0 <xQueueReceive+0x1b4>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043bc:	f001 fcec 	bl	8005d98 <vPortExitCritical>
				return pdPASS;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e069      	b.n	8004498 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043ca:	f001 fce5 	bl	8005d98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e062      	b.n	8004498 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043d8:	f107 0310 	add.w	r3, r7, #16
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fef5 	bl	80051cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043e6:	f001 fcd7 	bl	8005d98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ea:	f000 fcad 	bl	8004d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ee:	f001 fca5 	bl	8005d3c <vPortEnterCritical>
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d103      	bne.n	8004408 <xQueueReceive+0x11c>
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800440e:	b25b      	sxtb	r3, r3
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d103      	bne.n	800441e <xQueueReceive+0x132>
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800441e:	f001 fcbb 	bl	8005d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004422:	1d3a      	adds	r2, r7, #4
 8004424:	f107 0310 	add.w	r3, r7, #16
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fee4 	bl	80051f8 <xTaskCheckForTimeOut>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d123      	bne.n	800447e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004438:	f000 fa36 	bl	80048a8 <prvIsQueueEmpty>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d017      	beq.n	8004472 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	3324      	adds	r3, #36	; 0x24
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fe38 	bl	80050c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004452:	f000 f9d7 	bl	8004804 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004456:	f000 fc85 	bl	8004d64 <xTaskResumeAll>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d189      	bne.n	8004374 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <xQueueReceive+0x1b4>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	e780      	b.n	8004374 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004474:	f000 f9c6 	bl	8004804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004478:	f000 fc74 	bl	8004d64 <xTaskResumeAll>
 800447c:	e77a      	b.n	8004374 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800447e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004480:	f000 f9c0 	bl	8004804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004484:	f000 fc6e 	bl	8004d64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800448a:	f000 fa0d 	bl	80048a8 <prvIsQueueEmpty>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	f43f af6f 	beq.w	8004374 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004496:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004498:	4618      	mov	r0, r3
 800449a:	3730      	adds	r7, #48	; 0x30
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08e      	sub	sp, #56	; 0x38
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <xQueueSemaphoreTake+0x30>
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	e7fe      	b.n	80044d2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d009      	beq.n	80044f0 <xQueueSemaphoreTake+0x4c>
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	e7fe      	b.n	80044ee <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044f0:	f000 ffc0 	bl	8005474 <xTaskGetSchedulerState>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <xQueueSemaphoreTake+0x5c>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <xQueueSemaphoreTake+0x60>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <xQueueSemaphoreTake+0x62>
 8004504:	2300      	movs	r3, #0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <xQueueSemaphoreTake+0x7a>
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e7fe      	b.n	800451c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800451e:	f001 fc0d 	bl	8005d3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d024      	beq.n	8004578 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	1e5a      	subs	r2, r3, #1
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800453e:	f001 f953 	bl	80057e8 <pvTaskIncrementMutexHeldCount>
 8004542:	4602      	mov	r2, r0
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00f      	beq.n	8004570 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	3310      	adds	r3, #16
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fdd7 	bl	8005108 <xTaskRemoveFromEventList>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004560:	4b53      	ldr	r3, [pc, #332]	; (80046b0 <xQueueSemaphoreTake+0x20c>)
 8004562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004570:	f001 fc12 	bl	8005d98 <vPortExitCritical>
				return pdPASS;
 8004574:	2301      	movs	r3, #1
 8004576:	e096      	b.n	80046a6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d110      	bne.n	80045a0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	2b00      	cmp	r3, #0
 8004582:	d009      	beq.n	8004598 <xQueueSemaphoreTake+0xf4>
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	e7fe      	b.n	8004596 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004598:	f001 fbfe 	bl	8005d98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800459c:	2300      	movs	r3, #0
 800459e:	e082      	b.n	80046a6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fe0e 	bl	80051cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045b0:	2301      	movs	r3, #1
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045b4:	f001 fbf0 	bl	8005d98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045b8:	f000 fbc6 	bl	8004d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045bc:	f001 fbbe 	bl	8005d3c <vPortEnterCritical>
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c6:	b25b      	sxtb	r3, r3
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d103      	bne.n	80045d6 <xQueueSemaphoreTake+0x132>
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d103      	bne.n	80045ec <xQueueSemaphoreTake+0x148>
 80045e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ec:	f001 fbd4 	bl	8005d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045f0:	463a      	mov	r2, r7
 80045f2:	f107 030c 	add.w	r3, r7, #12
 80045f6:	4611      	mov	r1, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fdfd 	bl	80051f8 <xTaskCheckForTimeOut>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d132      	bne.n	800466a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004606:	f000 f94f 	bl	80048a8 <prvIsQueueEmpty>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d026      	beq.n	800465e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d109      	bne.n	800462c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004618:	f001 fb90 	bl	8005d3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 ff45 	bl	80054b0 <xTaskPriorityInherit>
 8004626:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004628:	f001 fbb6 	bl	8005d98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	3324      	adds	r3, #36	; 0x24
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fd43 	bl	80050c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800463a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800463c:	f000 f8e2 	bl	8004804 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004640:	f000 fb90 	bl	8004d64 <xTaskResumeAll>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	f47f af69 	bne.w	800451e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800464c:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <xQueueSemaphoreTake+0x20c>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	e75f      	b.n	800451e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800465e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004660:	f000 f8d0 	bl	8004804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004664:	f000 fb7e 	bl	8004d64 <xTaskResumeAll>
 8004668:	e759      	b.n	800451e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800466a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800466c:	f000 f8ca 	bl	8004804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004670:	f000 fb78 	bl	8004d64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004676:	f000 f917 	bl	80048a8 <prvIsQueueEmpty>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	f43f af4e 	beq.w	800451e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004688:	f001 fb58 	bl	8005d3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800468c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800468e:	f000 f811 	bl	80046b4 <prvGetDisinheritPriorityAfterTimeout>
 8004692:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800469a:	4618      	mov	r0, r3
 800469c:	f001 f80c 	bl	80056b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80046a0:	f001 fb7a 	bl	8005d98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3738      	adds	r7, #56	; 0x38
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f1c3 0307 	rsb	r3, r3, #7
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e001      	b.n	80046d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80046d6:	68fb      	ldr	r3, [r7, #12]
	}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d14d      	bne.n	80047a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 ff4e 	bl	80055b0 <xTaskPriorityDisinherit>
 8004714:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	e043      	b.n	80047a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d119      	bne.n	8004758 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6858      	ldr	r0, [r3, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	461a      	mov	r2, r3
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	f001 fe18 	bl	8006364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	441a      	add	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	429a      	cmp	r2, r3
 800474c:	d32b      	bcc.n	80047a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	e026      	b.n	80047a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68d8      	ldr	r0, [r3, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	461a      	mov	r2, r3
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	f001 fdfe 	bl	8006364 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	425b      	negs	r3, r3
 8004772:	441a      	add	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d207      	bcs.n	8004794 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	425b      	negs	r3, r3
 800478e:	441a      	add	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d105      	bne.n	80047a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047ae:	697b      	ldr	r3, [r7, #20]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d018      	beq.n	80047fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	441a      	add	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d303      	bcc.n	80047ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68d9      	ldr	r1, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	461a      	mov	r2, r3
 80047f6:	6838      	ldr	r0, [r7, #0]
 80047f8:	f001 fdb4 	bl	8006364 <memcpy>
	}
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800480c:	f001 fa96 	bl	8005d3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004816:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004818:	e011      	b.n	800483e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d012      	beq.n	8004848 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3324      	adds	r3, #36	; 0x24
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fc6e 	bl	8005108 <xTaskRemoveFromEventList>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004832:	f000 fd41 	bl	80052b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	3b01      	subs	r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800483e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	dce9      	bgt.n	800481a <prvUnlockQueue+0x16>
 8004846:	e000      	b.n	800484a <prvUnlockQueue+0x46>
					break;
 8004848:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	22ff      	movs	r2, #255	; 0xff
 800484e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004852:	f001 faa1 	bl	8005d98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004856:	f001 fa71 	bl	8005d3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004860:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004862:	e011      	b.n	8004888 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d012      	beq.n	8004892 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3310      	adds	r3, #16
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fc49 	bl	8005108 <xTaskRemoveFromEventList>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800487c:	f000 fd1c 	bl	80052b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004880:	7bbb      	ldrb	r3, [r7, #14]
 8004882:	3b01      	subs	r3, #1
 8004884:	b2db      	uxtb	r3, r3
 8004886:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800488c:	2b00      	cmp	r3, #0
 800488e:	dce9      	bgt.n	8004864 <prvUnlockQueue+0x60>
 8004890:	e000      	b.n	8004894 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004892:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	22ff      	movs	r2, #255	; 0xff
 8004898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800489c:	f001 fa7c 	bl	8005d98 <vPortExitCritical>
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048b0:	f001 fa44 	bl	8005d3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d102      	bne.n	80048c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e001      	b.n	80048c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048c6:	f001 fa67 	bl	8005d98 <vPortExitCritical>

	return xReturn;
 80048ca:	68fb      	ldr	r3, [r7, #12]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048dc:	f001 fa2e 	bl	8005d3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d102      	bne.n	80048f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e001      	b.n	80048f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048f6:	f001 fa4f 	bl	8005d98 <vPortExitCritical>

	return xReturn;
 80048fa:	68fb      	ldr	r3, [r7, #12]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08e      	sub	sp, #56	; 0x38
 8004908:	af04      	add	r7, sp, #16
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004914:	2b00      	cmp	r3, #0
 8004916:	d109      	bne.n	800492c <xTaskCreateStatic+0x28>
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	623b      	str	r3, [r7, #32]
 800492a:	e7fe      	b.n	800492a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <xTaskCreateStatic+0x42>
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e7fe      	b.n	8004944 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004946:	2354      	movs	r3, #84	; 0x54
 8004948:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b54      	cmp	r3, #84	; 0x54
 800494e:	d009      	beq.n	8004964 <xTaskCreateStatic+0x60>
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e7fe      	b.n	8004962 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004964:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01e      	beq.n	80049aa <xTaskCreateStatic+0xa6>
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01b      	beq.n	80049aa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800497a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004984:	2300      	movs	r3, #0
 8004986:	9303      	str	r3, [sp, #12]
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	9302      	str	r3, [sp, #8]
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	9301      	str	r3, [sp, #4]
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f850 	bl	8004a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049a4:	f000 f8d4 	bl	8004b50 <prvAddNewTaskToReadyList>
 80049a8:	e001      	b.n	80049ae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049ae:	697b      	ldr	r3, [r7, #20]
	}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08c      	sub	sp, #48	; 0x30
 80049bc:	af04      	add	r7, sp, #16
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f001 facf 	bl	8005f70 <pvPortMalloc>
 80049d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00e      	beq.n	80049f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049da:	2054      	movs	r0, #84	; 0x54
 80049dc:	f001 fac8 	bl	8005f70 <pvPortMalloc>
 80049e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30
 80049ee:	e005      	b.n	80049fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049f0:	6978      	ldr	r0, [r7, #20]
 80049f2:	f001 fb7f 	bl	80060f4 <vPortFree>
 80049f6:	e001      	b.n	80049fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d017      	beq.n	8004a32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	9303      	str	r3, [sp, #12]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	9302      	str	r3, [sp, #8]
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f80e 	bl	8004a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a26:	69f8      	ldr	r0, [r7, #28]
 8004a28:	f000 f892 	bl	8004b50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	e002      	b.n	8004a38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
 8004a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a38:	69bb      	ldr	r3, [r7, #24]
	}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b088      	sub	sp, #32
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f023 0307 	bic.w	r3, r3, #7
 8004a68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d009      	beq.n	8004a88 <prvInitialiseNewTask+0x46>
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e7fe      	b.n	8004a86 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01f      	beq.n	8004ace <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	e012      	b.n	8004aba <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	7819      	ldrb	r1, [r3, #0]
 8004a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3334      	adds	r3, #52	; 0x34
 8004aa4:	460a      	mov	r2, r1
 8004aa6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d006      	beq.n	8004ac2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	d9e9      	bls.n	8004a94 <prvInitialiseNewTask+0x52>
 8004ac0:	e000      	b.n	8004ac4 <prvInitialiseNewTask+0x82>
			{
				break;
 8004ac2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004acc:	e003      	b.n	8004ad6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d901      	bls.n	8004ae0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004adc:	2306      	movs	r3, #6
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	2200      	movs	r2, #0
 8004af0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	3304      	adds	r3, #4
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff f8dd 	bl	8003cb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	3318      	adds	r3, #24
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff f8d8 	bl	8003cb6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	f1c3 0207 	rsb	r2, r3, #7
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	2200      	movs	r2, #0
 8004b20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	68f9      	ldr	r1, [r7, #12]
 8004b2e:	69b8      	ldr	r0, [r7, #24]
 8004b30:	f000 ffe0 	bl	8005af4 <pxPortInitialiseStack>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b46:	bf00      	nop
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b58:	f001 f8f0 	bl	8005d3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b5c:	4b2a      	ldr	r3, [pc, #168]	; (8004c08 <prvAddNewTaskToReadyList+0xb8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3301      	adds	r3, #1
 8004b62:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <prvAddNewTaskToReadyList+0xb8>)
 8004b64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <prvAddNewTaskToReadyList+0xbc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b6e:	4a27      	ldr	r2, [pc, #156]	; (8004c0c <prvAddNewTaskToReadyList+0xbc>)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b74:	4b24      	ldr	r3, [pc, #144]	; (8004c08 <prvAddNewTaskToReadyList+0xb8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d110      	bne.n	8004b9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b7c:	f000 fbc0 	bl	8005300 <prvInitialiseTaskLists>
 8004b80:	e00d      	b.n	8004b9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b82:	4b23      	ldr	r3, [pc, #140]	; (8004c10 <prvAddNewTaskToReadyList+0xc0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <prvAddNewTaskToReadyList+0xbc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d802      	bhi.n	8004b9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b98:	4a1c      	ldr	r2, [pc, #112]	; (8004c0c <prvAddNewTaskToReadyList+0xbc>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b9e:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <prvAddNewTaskToReadyList+0xc4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <prvAddNewTaskToReadyList+0xc4>)
 8004ba6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	2201      	movs	r2, #1
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <prvAddNewTaskToReadyList+0xc8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <prvAddNewTaskToReadyList+0xc8>)
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <prvAddNewTaskToReadyList+0xcc>)
 8004bc8:	441a      	add	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f7ff f87d 	bl	8003cd0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bd6:	f001 f8df 	bl	8005d98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <prvAddNewTaskToReadyList+0xc0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00e      	beq.n	8004c00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <prvAddNewTaskToReadyList+0xbc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d207      	bcs.n	8004c00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <prvAddNewTaskToReadyList+0xd0>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2000038c 	.word	0x2000038c
 8004c0c:	2000028c 	.word	0x2000028c
 8004c10:	20000398 	.word	0x20000398
 8004c14:	200003a8 	.word	0x200003a8
 8004c18:	20000394 	.word	0x20000394
 8004c1c:	20000290 	.word	0x20000290
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d016      	beq.n	8004c64 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c36:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <vTaskDelay+0x60>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <vTaskDelay+0x2e>
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	e7fe      	b.n	8004c50 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004c52:	f000 f879 	bl	8004d48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c56:	2100      	movs	r1, #0
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fee5 	bl	8005a28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c5e:	f000 f881 	bl	8004d64 <xTaskResumeAll>
 8004c62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d107      	bne.n	8004c7a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004c6a:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <vTaskDelay+0x64>)
 8004c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200003b4 	.word	0x200003b4
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c9a:	463a      	mov	r2, r7
 8004c9c:	1d39      	adds	r1, r7, #4
 8004c9e:	f107 0308 	add.w	r3, r7, #8
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fb ff1e 	bl	8000ae4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	9202      	str	r2, [sp, #8]
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	460a      	mov	r2, r1
 8004cba:	491d      	ldr	r1, [pc, #116]	; (8004d30 <vTaskStartScheduler+0xa4>)
 8004cbc:	481d      	ldr	r0, [pc, #116]	; (8004d34 <vTaskStartScheduler+0xa8>)
 8004cbe:	f7ff fe21 	bl	8004904 <xTaskCreateStatic>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <vTaskStartScheduler+0xac>)
 8004cc6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <vTaskStartScheduler+0xac>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e001      	b.n	8004cda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d115      	bne.n	8004d0c <vTaskStartScheduler+0x80>
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <vTaskStartScheduler+0xb0>)
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cfa:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <vTaskStartScheduler+0xb4>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d00:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <vTaskStartScheduler+0xb8>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d06:	f000 ff7b 	bl	8005c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d0a:	e00d      	b.n	8004d28 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d109      	bne.n	8004d28 <vTaskStartScheduler+0x9c>
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e7fe      	b.n	8004d26 <vTaskStartScheduler+0x9a>
}
 8004d28:	bf00      	nop
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	08006424 	.word	0x08006424
 8004d34:	080052d1 	.word	0x080052d1
 8004d38:	200003b0 	.word	0x200003b0
 8004d3c:	200003ac 	.word	0x200003ac
 8004d40:	20000398 	.word	0x20000398
 8004d44:	20000390 	.word	0x20000390

08004d48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <vTaskSuspendAll+0x18>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	4a03      	ldr	r2, [pc, #12]	; (8004d60 <vTaskSuspendAll+0x18>)
 8004d54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004d56:	bf00      	nop
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	200003b4 	.word	0x200003b4

08004d64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <xTaskResumeAll+0x114>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <xTaskResumeAll+0x2a>
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	e7fe      	b.n	8004d8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d8e:	f000 ffd5 	bl	8005d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d92:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <xTaskResumeAll+0x114>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	4a37      	ldr	r2, [pc, #220]	; (8004e78 <xTaskResumeAll+0x114>)
 8004d9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <xTaskResumeAll+0x114>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d161      	bne.n	8004e68 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004da4:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <xTaskResumeAll+0x118>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d05d      	beq.n	8004e68 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dac:	e02e      	b.n	8004e0c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dae:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <xTaskResumeAll+0x11c>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3318      	adds	r3, #24
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe ffe5 	bl	8003d8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fe ffe0 	bl	8003d8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	2201      	movs	r2, #1
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <xTaskResumeAll+0x120>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <xTaskResumeAll+0x120>)
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4a27      	ldr	r2, [pc, #156]	; (8004e88 <xTaskResumeAll+0x124>)
 8004dea:	441a      	add	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f7fe ff6c 	bl	8003cd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	4b23      	ldr	r3, [pc, #140]	; (8004e8c <xTaskResumeAll+0x128>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004e06:	4b22      	ldr	r3, [pc, #136]	; (8004e90 <xTaskResumeAll+0x12c>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <xTaskResumeAll+0x11c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1cc      	bne.n	8004dae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e1a:	f000 fb0b 	bl	8005434 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <xTaskResumeAll+0x130>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d010      	beq.n	8004e4c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e2a:	f000 f837 	bl	8004e9c <xTaskIncrementTick>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004e34:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <xTaskResumeAll+0x12c>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f1      	bne.n	8004e2a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <xTaskResumeAll+0x130>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <xTaskResumeAll+0x12c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e54:	2301      	movs	r3, #1
 8004e56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <xTaskResumeAll+0x134>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e68:	f000 ff96 	bl	8005d98 <vPortExitCritical>

	return xAlreadyYielded;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200003b4 	.word	0x200003b4
 8004e7c:	2000038c 	.word	0x2000038c
 8004e80:	2000034c 	.word	0x2000034c
 8004e84:	20000394 	.word	0x20000394
 8004e88:	20000290 	.word	0x20000290
 8004e8c:	2000028c 	.word	0x2000028c
 8004e90:	200003a0 	.word	0x200003a0
 8004e94:	2000039c 	.word	0x2000039c
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea6:	4b4e      	ldr	r3, [pc, #312]	; (8004fe0 <xTaskIncrementTick+0x144>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f040 8087 	bne.w	8004fbe <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004eb0:	4b4c      	ldr	r3, [pc, #304]	; (8004fe4 <xTaskIncrementTick+0x148>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004eb8:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <xTaskIncrementTick+0x148>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d11f      	bne.n	8004f04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ec4:	4b48      	ldr	r3, [pc, #288]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <xTaskIncrementTick+0x46>
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	e7fe      	b.n	8004ee0 <xTaskIncrementTick+0x44>
 8004ee2:	4b41      	ldr	r3, [pc, #260]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	4b40      	ldr	r3, [pc, #256]	; (8004fec <xTaskIncrementTick+0x150>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a3e      	ldr	r2, [pc, #248]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4a3e      	ldr	r2, [pc, #248]	; (8004fec <xTaskIncrementTick+0x150>)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	4b3e      	ldr	r3, [pc, #248]	; (8004ff0 <xTaskIncrementTick+0x154>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	4a3c      	ldr	r2, [pc, #240]	; (8004ff0 <xTaskIncrementTick+0x154>)
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	f000 fa98 	bl	8005434 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f04:	4b3b      	ldr	r3, [pc, #236]	; (8004ff4 <xTaskIncrementTick+0x158>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d348      	bcc.n	8004fa0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f0e:	4b36      	ldr	r3, [pc, #216]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f18:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <xTaskIncrementTick+0x158>)
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1e:	601a      	str	r2, [r3, #0]
					break;
 8004f20:	e03e      	b.n	8004fa0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f22:	4b31      	ldr	r3, [pc, #196]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d203      	bcs.n	8004f42 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f3a:	4a2e      	ldr	r2, [pc, #184]	; (8004ff4 <xTaskIncrementTick+0x158>)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f40:	e02e      	b.n	8004fa0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe ff1f 	bl	8003d8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	3318      	adds	r3, #24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fe ff16 	bl	8003d8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	2201      	movs	r2, #1
 8004f64:	409a      	lsls	r2, r3
 8004f66:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <xTaskIncrementTick+0x15c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <xTaskIncrementTick+0x15c>)
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <xTaskIncrementTick+0x160>)
 8004f7e:	441a      	add	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f7fe fea2 	bl	8003cd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <xTaskIncrementTick+0x164>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3b9      	bcc.n	8004f0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f9e:	e7b6      	b.n	8004f0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fa0:	4b17      	ldr	r3, [pc, #92]	; (8005000 <xTaskIncrementTick+0x164>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa6:	4915      	ldr	r1, [pc, #84]	; (8004ffc <xTaskIncrementTick+0x160>)
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d907      	bls.n	8004fc8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	e004      	b.n	8004fc8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <xTaskIncrementTick+0x168>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	4a0f      	ldr	r2, [pc, #60]	; (8005004 <xTaskIncrementTick+0x168>)
 8004fc6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004fc8:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <xTaskIncrementTick+0x16c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004fd4:	697b      	ldr	r3, [r7, #20]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200003b4 	.word	0x200003b4
 8004fe4:	20000390 	.word	0x20000390
 8004fe8:	20000344 	.word	0x20000344
 8004fec:	20000348 	.word	0x20000348
 8004ff0:	200003a4 	.word	0x200003a4
 8004ff4:	200003ac 	.word	0x200003ac
 8004ff8:	20000394 	.word	0x20000394
 8004ffc:	20000290 	.word	0x20000290
 8005000:	2000028c 	.word	0x2000028c
 8005004:	2000039c 	.word	0x2000039c
 8005008:	200003a0 	.word	0x200003a0

0800500c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005012:	4b26      	ldr	r3, [pc, #152]	; (80050ac <vTaskSwitchContext+0xa0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800501a:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <vTaskSwitchContext+0xa4>)
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005020:	e03e      	b.n	80050a0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005022:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <vTaskSwitchContext+0xa4>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005028:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <vTaskSwitchContext+0xa8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005036:	7afb      	ldrb	r3, [r7, #11]
 8005038:	f1c3 031f 	rsb	r3, r3, #31
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	491e      	ldr	r1, [pc, #120]	; (80050b8 <vTaskSwitchContext+0xac>)
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	607b      	str	r3, [r7, #4]
 8005064:	e7fe      	b.n	8005064 <vTaskSwitchContext+0x58>
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4a11      	ldr	r2, [pc, #68]	; (80050b8 <vTaskSwitchContext+0xac>)
 8005072:	4413      	add	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	605a      	str	r2, [r3, #4]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	3308      	adds	r3, #8
 8005088:	429a      	cmp	r2, r3
 800508a:	d104      	bne.n	8005096 <vTaskSwitchContext+0x8a>
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a07      	ldr	r2, [pc, #28]	; (80050bc <vTaskSwitchContext+0xb0>)
 800509e:	6013      	str	r3, [r2, #0]
}
 80050a0:	bf00      	nop
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	200003b4 	.word	0x200003b4
 80050b0:	200003a0 	.word	0x200003a0
 80050b4:	20000394 	.word	0x20000394
 80050b8:	20000290 	.word	0x20000290
 80050bc:	2000028c 	.word	0x2000028c

080050c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <vTaskPlaceOnEventList+0x24>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	e7fe      	b.n	80050e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050e4:	4b07      	ldr	r3, [pc, #28]	; (8005104 <vTaskPlaceOnEventList+0x44>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3318      	adds	r3, #24
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7fe fe13 	bl	8003d18 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050f2:	2101      	movs	r1, #1
 80050f4:	6838      	ldr	r0, [r7, #0]
 80050f6:	f000 fc97 	bl	8005a28 <prvAddCurrentTaskToDelayedList>
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	2000028c 	.word	0x2000028c

08005108 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <xTaskRemoveFromEventList+0x2a>
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e7fe      	b.n	8005130 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3318      	adds	r3, #24
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe fe27 	bl	8003d8a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800513c:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <xTaskRemoveFromEventList+0xac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11c      	bne.n	800517e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	3304      	adds	r3, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe fe1e 	bl	8003d8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	2201      	movs	r2, #1
 8005154:	409a      	lsls	r2, r3
 8005156:	4b18      	ldr	r3, [pc, #96]	; (80051b8 <xTaskRemoveFromEventList+0xb0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4313      	orrs	r3, r2
 800515c:	4a16      	ldr	r2, [pc, #88]	; (80051b8 <xTaskRemoveFromEventList+0xb0>)
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4a13      	ldr	r2, [pc, #76]	; (80051bc <xTaskRemoveFromEventList+0xb4>)
 800516e:	441a      	add	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	3304      	adds	r3, #4
 8005174:	4619      	mov	r1, r3
 8005176:	4610      	mov	r0, r2
 8005178:	f7fe fdaa 	bl	8003cd0 <vListInsertEnd>
 800517c:	e005      	b.n	800518a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	3318      	adds	r3, #24
 8005182:	4619      	mov	r1, r3
 8005184:	480e      	ldr	r0, [pc, #56]	; (80051c0 <xTaskRemoveFromEventList+0xb8>)
 8005186:	f7fe fda3 	bl	8003cd0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <xTaskRemoveFromEventList+0xbc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	429a      	cmp	r2, r3
 8005196:	d905      	bls.n	80051a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005198:	2301      	movs	r3, #1
 800519a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <xTaskRemoveFromEventList+0xc0>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e001      	b.n	80051a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051a8:	697b      	ldr	r3, [r7, #20]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200003b4 	.word	0x200003b4
 80051b8:	20000394 	.word	0x20000394
 80051bc:	20000290 	.word	0x20000290
 80051c0:	2000034c 	.word	0x2000034c
 80051c4:	2000028c 	.word	0x2000028c
 80051c8:	200003a0 	.word	0x200003a0

080051cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <vTaskInternalSetTimeOutState+0x24>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <vTaskInternalSetTimeOutState+0x28>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	605a      	str	r2, [r3, #4]
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	200003a4 	.word	0x200003a4
 80051f4:	20000390 	.word	0x20000390

080051f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <xTaskCheckForTimeOut+0x24>
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	e7fe      	b.n	800521a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <xTaskCheckForTimeOut+0x3e>
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e7fe      	b.n	8005234 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005236:	f000 fd81 	bl	8005d3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800523a:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <xTaskCheckForTimeOut+0xb8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d102      	bne.n	800525a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e023      	b.n	80052a2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <xTaskCheckForTimeOut+0xbc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d007      	beq.n	8005276 <xTaskCheckForTimeOut+0x7e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	429a      	cmp	r2, r3
 800526e:	d302      	bcc.n	8005276 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005270:	2301      	movs	r3, #1
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	e015      	b.n	80052a2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	429a      	cmp	r2, r3
 800527e:	d20b      	bcs.n	8005298 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff ff9d 	bl	80051cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	e004      	b.n	80052a2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800529e:	2301      	movs	r3, #1
 80052a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052a2:	f000 fd79 	bl	8005d98 <vPortExitCritical>

	return xReturn;
 80052a6:	69fb      	ldr	r3, [r7, #28]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	20000390 	.word	0x20000390
 80052b4:	200003a4 	.word	0x200003a4

080052b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <vTaskMissedYield+0x14>)
 80052be:	2201      	movs	r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	200003a0 	.word	0x200003a0

080052d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052d8:	f000 f852 	bl	8005380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <prvIdleTask+0x28>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d9f9      	bls.n	80052d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <prvIdleTask+0x2c>)
 80052e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052f4:	e7f0      	b.n	80052d8 <prvIdleTask+0x8>
 80052f6:	bf00      	nop
 80052f8:	20000290 	.word	0x20000290
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005306:	2300      	movs	r3, #0
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	e00c      	b.n	8005326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4a12      	ldr	r2, [pc, #72]	; (8005360 <prvInitialiseTaskLists+0x60>)
 8005318:	4413      	add	r3, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe fcab 	bl	8003c76 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3301      	adds	r3, #1
 8005324:	607b      	str	r3, [r7, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b06      	cmp	r3, #6
 800532a:	d9ef      	bls.n	800530c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800532c:	480d      	ldr	r0, [pc, #52]	; (8005364 <prvInitialiseTaskLists+0x64>)
 800532e:	f7fe fca2 	bl	8003c76 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005332:	480d      	ldr	r0, [pc, #52]	; (8005368 <prvInitialiseTaskLists+0x68>)
 8005334:	f7fe fc9f 	bl	8003c76 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005338:	480c      	ldr	r0, [pc, #48]	; (800536c <prvInitialiseTaskLists+0x6c>)
 800533a:	f7fe fc9c 	bl	8003c76 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800533e:	480c      	ldr	r0, [pc, #48]	; (8005370 <prvInitialiseTaskLists+0x70>)
 8005340:	f7fe fc99 	bl	8003c76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005344:	480b      	ldr	r0, [pc, #44]	; (8005374 <prvInitialiseTaskLists+0x74>)
 8005346:	f7fe fc96 	bl	8003c76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800534a:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <prvInitialiseTaskLists+0x78>)
 800534c:	4a05      	ldr	r2, [pc, #20]	; (8005364 <prvInitialiseTaskLists+0x64>)
 800534e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <prvInitialiseTaskLists+0x7c>)
 8005352:	4a05      	ldr	r2, [pc, #20]	; (8005368 <prvInitialiseTaskLists+0x68>)
 8005354:	601a      	str	r2, [r3, #0]
}
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000290 	.word	0x20000290
 8005364:	2000031c 	.word	0x2000031c
 8005368:	20000330 	.word	0x20000330
 800536c:	2000034c 	.word	0x2000034c
 8005370:	20000360 	.word	0x20000360
 8005374:	20000378 	.word	0x20000378
 8005378:	20000344 	.word	0x20000344
 800537c:	20000348 	.word	0x20000348

08005380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005386:	e019      	b.n	80053bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005388:	f000 fcd8 	bl	8005d3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800538c:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <prvCheckTasksWaitingTermination+0x4c>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	4618      	mov	r0, r3
 800539a:	f7fe fcf6 	bl	8003d8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800539e:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <prvCheckTasksWaitingTermination+0x50>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <prvCheckTasksWaitingTermination+0x50>)
 80053a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <prvCheckTasksWaitingTermination+0x54>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <prvCheckTasksWaitingTermination+0x54>)
 80053b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053b2:	f000 fcf1 	bl	8005d98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f80e 	bl	80053d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <prvCheckTasksWaitingTermination+0x54>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e1      	bne.n	8005388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20000360 	.word	0x20000360
 80053d0:	2000038c 	.word	0x2000038c
 80053d4:	20000374 	.word	0x20000374

080053d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d108      	bne.n	80053fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fe80 	bl	80060f4 <vPortFree>
				vPortFree( pxTCB );
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fe7d 	bl	80060f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053fa:	e017      	b.n	800542c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005402:	2b01      	cmp	r3, #1
 8005404:	d103      	bne.n	800540e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fe74 	bl	80060f4 <vPortFree>
	}
 800540c:	e00e      	b.n	800542c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005414:	2b02      	cmp	r3, #2
 8005416:	d009      	beq.n	800542c <prvDeleteTCB+0x54>
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e7fe      	b.n	800542a <prvDeleteTCB+0x52>
	}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <prvResetNextTaskUnblockTime+0x38>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d104      	bne.n	800544e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005444:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <prvResetNextTaskUnblockTime+0x3c>)
 8005446:	f04f 32ff 	mov.w	r2, #4294967295
 800544a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800544c:	e008      	b.n	8005460 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <prvResetNextTaskUnblockTime+0x38>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	4a04      	ldr	r2, [pc, #16]	; (8005470 <prvResetNextTaskUnblockTime+0x3c>)
 800545e:	6013      	str	r3, [r2, #0]
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	20000344 	.word	0x20000344
 8005470:	200003ac 	.word	0x200003ac

08005474 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <xTaskGetSchedulerState+0x34>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005482:	2301      	movs	r3, #1
 8005484:	607b      	str	r3, [r7, #4]
 8005486:	e008      	b.n	800549a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005488:	4b08      	ldr	r3, [pc, #32]	; (80054ac <xTaskGetSchedulerState+0x38>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005490:	2302      	movs	r3, #2
 8005492:	607b      	str	r3, [r7, #4]
 8005494:	e001      	b.n	800549a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005496:	2300      	movs	r3, #0
 8005498:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800549a:	687b      	ldr	r3, [r7, #4]
	}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	20000398 	.word	0x20000398
 80054ac:	200003b4 	.word	0x200003b4

080054b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d069      	beq.n	800559a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ca:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <xTaskPriorityInherit+0xf4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d259      	bcs.n	8005588 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	db06      	blt.n	80054ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054dc:	4b31      	ldr	r3, [pc, #196]	; (80055a4 <xTaskPriorityInherit+0xf4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	f1c3 0207 	rsb	r2, r3, #7
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6959      	ldr	r1, [r3, #20]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <xTaskPriorityInherit+0xf8>)
 80054fc:	4413      	add	r3, r2
 80054fe:	4299      	cmp	r1, r3
 8005500:	d13a      	bne.n	8005578 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	3304      	adds	r3, #4
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe fc3f 	bl	8003d8a <uxListRemove>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d115      	bne.n	800553e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005516:	4924      	ldr	r1, [pc, #144]	; (80055a8 <xTaskPriorityInherit+0xf8>)
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <xTaskPriorityInherit+0x8e>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	2201      	movs	r2, #1
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43da      	mvns	r2, r3
 8005534:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <xTaskPriorityInherit+0xfc>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4013      	ands	r3, r2
 800553a:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <xTaskPriorityInherit+0xfc>)
 800553c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800553e:	4b19      	ldr	r3, [pc, #100]	; (80055a4 <xTaskPriorityInherit+0xf4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	2201      	movs	r2, #1
 800554e:	409a      	lsls	r2, r3
 8005550:	4b16      	ldr	r3, [pc, #88]	; (80055ac <xTaskPriorityInherit+0xfc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4313      	orrs	r3, r2
 8005556:	4a15      	ldr	r2, [pc, #84]	; (80055ac <xTaskPriorityInherit+0xfc>)
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4a10      	ldr	r2, [pc, #64]	; (80055a8 <xTaskPriorityInherit+0xf8>)
 8005568:	441a      	add	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3304      	adds	r3, #4
 800556e:	4619      	mov	r1, r3
 8005570:	4610      	mov	r0, r2
 8005572:	f7fe fbad 	bl	8003cd0 <vListInsertEnd>
 8005576:	e004      	b.n	8005582 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <xTaskPriorityInherit+0xf4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005582:	2301      	movs	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e008      	b.n	800559a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <xTaskPriorityInherit+0xf4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	429a      	cmp	r2, r3
 8005594:	d201      	bcs.n	800559a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005596:	2301      	movs	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800559a:	68fb      	ldr	r3, [r7, #12]
	}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	2000028c 	.word	0x2000028c
 80055a8:	20000290 	.word	0x20000290
 80055ac:	20000394 	.word	0x20000394

080055b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d06c      	beq.n	80056a0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055c6:	4b39      	ldr	r3, [pc, #228]	; (80056ac <xTaskPriorityDisinherit+0xfc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d009      	beq.n	80055e4 <xTaskPriorityDisinherit+0x34>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e7fe      	b.n	80055e2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d109      	bne.n	8005600 <xTaskPriorityDisinherit+0x50>
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	e7fe      	b.n	80055fe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005604:	1e5a      	subs	r2, r3, #1
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005612:	429a      	cmp	r2, r3
 8005614:	d044      	beq.n	80056a0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	2b00      	cmp	r3, #0
 800561c:	d140      	bne.n	80056a0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	3304      	adds	r3, #4
 8005622:	4618      	mov	r0, r3
 8005624:	f7fe fbb1 	bl	8003d8a <uxListRemove>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d115      	bne.n	800565a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005632:	491f      	ldr	r1, [pc, #124]	; (80056b0 <xTaskPriorityDisinherit+0x100>)
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <xTaskPriorityDisinherit+0xaa>
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	2201      	movs	r2, #1
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43da      	mvns	r2, r3
 8005650:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <xTaskPriorityDisinherit+0x104>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4013      	ands	r3, r2
 8005656:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <xTaskPriorityDisinherit+0x104>)
 8005658:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	f1c3 0207 	rsb	r2, r3, #7
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	2201      	movs	r2, #1
 8005674:	409a      	lsls	r2, r3
 8005676:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <xTaskPriorityDisinherit+0x104>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4313      	orrs	r3, r2
 800567c:	4a0d      	ldr	r2, [pc, #52]	; (80056b4 <xTaskPriorityDisinherit+0x104>)
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4a08      	ldr	r2, [pc, #32]	; (80056b0 <xTaskPriorityDisinherit+0x100>)
 800568e:	441a      	add	r2, r3
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f7fe fb1a 	bl	8003cd0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056a0:	697b      	ldr	r3, [r7, #20]
	}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	2000028c 	.word	0x2000028c
 80056b0:	20000290 	.word	0x20000290
 80056b4:	20000394 	.word	0x20000394

080056b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80056c6:	2301      	movs	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 8081 	beq.w	80057d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <vTaskPriorityDisinheritAfterTimeout+0x36>
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e7fe      	b.n	80056ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d902      	bls.n	80056fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	e002      	b.n	8005704 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	429a      	cmp	r2, r3
 800570c:	d062      	beq.n	80057d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	429a      	cmp	r2, r3
 8005716:	d15d      	bne.n	80057d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005718:	4b30      	ldr	r3, [pc, #192]	; (80057dc <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	429a      	cmp	r2, r3
 8005720:	d109      	bne.n	8005736 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	e7fe      	b.n	8005734 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	db04      	blt.n	8005754 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f1c3 0207 	rsb	r2, r3, #7
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	6959      	ldr	r1, [r3, #20]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005764:	4413      	add	r3, r2
 8005766:	4299      	cmp	r1, r3
 8005768:	d134      	bne.n	80057d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	3304      	adds	r3, #4
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fb0b 	bl	8003d8a <uxListRemove>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d115      	bne.n	80057a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577e:	4918      	ldr	r1, [pc, #96]	; (80057e0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	2201      	movs	r2, #1
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	43da      	mvns	r2, r3
 800579c:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4013      	ands	r3, r2
 80057a2:	4a10      	ldr	r2, [pc, #64]	; (80057e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80057a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	2201      	movs	r2, #1
 80057ac:	409a      	lsls	r2, r3
 80057ae:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	4a0b      	ldr	r2, [pc, #44]	; (80057e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4a06      	ldr	r2, [pc, #24]	; (80057e0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80057c6:	441a      	add	r2, r3
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe fa7e 	bl	8003cd0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057d4:	bf00      	nop
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	2000028c 	.word	0x2000028c
 80057e0:	20000290 	.word	0x20000290
 80057e4:	20000394 	.word	0x20000394

080057e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <pvTaskIncrementMutexHeldCount+0x24>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <pvTaskIncrementMutexHeldCount+0x24>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057fa:	3201      	adds	r2, #1
 80057fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80057fe:	4b03      	ldr	r3, [pc, #12]	; (800580c <pvTaskIncrementMutexHeldCount+0x24>)
 8005800:	681b      	ldr	r3, [r3, #0]
	}
 8005802:	4618      	mov	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	2000028c 	.word	0x2000028c

08005810 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800581e:	f000 fa8d 	bl	8005d3c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005822:	4b26      	ldr	r3, [pc, #152]	; (80058bc <xTaskNotifyWait+0xac>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d01a      	beq.n	8005866 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005830:	4b22      	ldr	r3, [pc, #136]	; (80058bc <xTaskNotifyWait+0xac>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	43d2      	mvns	r2, r2
 800583a:	400a      	ands	r2, r1
 800583c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800583e:	4b1f      	ldr	r3, [pc, #124]	; (80058bc <xTaskNotifyWait+0xac>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800584e:	2101      	movs	r1, #1
 8005850:	6838      	ldr	r0, [r7, #0]
 8005852:	f000 f8e9 	bl	8005a28 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005856:	4b1a      	ldr	r3, [pc, #104]	; (80058c0 <xTaskNotifyWait+0xb0>)
 8005858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005866:	f000 fa97 	bl	8005d98 <vPortExitCritical>

		taskENTER_CRITICAL();
 800586a:	f000 fa67 	bl	8005d3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d004      	beq.n	800587e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005874:	4b11      	ldr	r3, [pc, #68]	; (80058bc <xTaskNotifyWait+0xac>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <xTaskNotifyWait+0xac>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d002      	beq.n	8005892 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	e008      	b.n	80058a4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005892:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <xTaskNotifyWait+0xac>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	43d2      	mvns	r2, r2
 800589c:	400a      	ands	r2, r1
 800589e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <xTaskNotifyWait+0xac>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80058ae:	f000 fa73 	bl	8005d98 <vPortExitCritical>

		return xReturn;
 80058b2:	697b      	ldr	r3, [r7, #20]
	}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	2000028c 	.word	0x2000028c
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	; 0x28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80058d4:	2301      	movs	r3, #1
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <xTaskGenericNotify+0x2e>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e7fe      	b.n	80058f0 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80058f6:	f000 fa21 	bl	8005d3c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800590e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	2b04      	cmp	r3, #4
 800591c:	d827      	bhi.n	800596e <xTaskGenericNotify+0xaa>
 800591e:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <xTaskGenericNotify+0x60>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	0800598d 	.word	0x0800598d
 8005928:	08005939 	.word	0x08005939
 800592c:	08005947 	.word	0x08005947
 8005930:	08005953 	.word	0x08005953
 8005934:	0800595b 	.word	0x0800595b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	431a      	orrs	r2, r3
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005944:	e025      	b.n	8005992 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005950:	e01f      	b.n	8005992 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005958:	e01b      	b.n	8005992 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800595a:	7ffb      	ldrb	r3, [r7, #31]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d003      	beq.n	8005968 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005966:	e014      	b.n	8005992 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8005968:	2300      	movs	r3, #0
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800596c:	e011      	b.n	8005992 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d00b      	beq.n	8005990 <xTaskGenericNotify+0xcc>
 8005978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e7fe      	b.n	800598a <xTaskGenericNotify+0xc6>
					break;
 800598c:	bf00      	nop
 800598e:	e000      	b.n	8005992 <xTaskGenericNotify+0xce>

					break;
 8005990:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005992:	7ffb      	ldrb	r3, [r7, #31]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d138      	bne.n	8005a0a <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	3304      	adds	r3, #4
 800599c:	4618      	mov	r0, r3
 800599e:	f7fe f9f4 	bl	8003d8a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	2201      	movs	r2, #1
 80059a8:	409a      	lsls	r2, r3
 80059aa:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <xTaskGenericNotify+0x154>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	4a19      	ldr	r2, [pc, #100]	; (8005a18 <xTaskGenericNotify+0x154>)
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <xTaskGenericNotify+0x158>)
 80059c2:	441a      	add	r2, r3
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4619      	mov	r1, r3
 80059ca:	4610      	mov	r0, r2
 80059cc:	f7fe f980 	bl	8003cd0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d009      	beq.n	80059ec <xTaskGenericNotify+0x128>
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e7fe      	b.n	80059ea <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <xTaskGenericNotify+0x15c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d907      	bls.n	8005a0a <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80059fa:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <xTaskGenericNotify+0x160>)
 80059fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005a0a:	f000 f9c5 	bl	8005d98 <vPortExitCritical>

		return xReturn;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3728      	adds	r7, #40	; 0x28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000394 	.word	0x20000394
 8005a1c:	20000290 	.word	0x20000290
 8005a20:	2000028c 	.word	0x2000028c
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a32:	4b29      	ldr	r3, [pc, #164]	; (8005ad8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a38:	4b28      	ldr	r3, [pc, #160]	; (8005adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe f9a3 	bl	8003d8a <uxListRemove>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a4a:	4b24      	ldr	r3, [pc, #144]	; (8005adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	2201      	movs	r2, #1
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43da      	mvns	r2, r3
 8005a58:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	4a20      	ldr	r2, [pc, #128]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d10a      	bne.n	8005a80 <prvAddCurrentTaskToDelayedList+0x58>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a70:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4619      	mov	r1, r3
 8005a78:	481a      	ldr	r0, [pc, #104]	; (8005ae4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a7a:	f7fe f929 	bl	8003cd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a7e:	e026      	b.n	8005ace <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4413      	add	r3, r2
 8005a86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a88:	4b14      	ldr	r3, [pc, #80]	; (8005adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d209      	bcs.n	8005aac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a98:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f7fe f937 	bl	8003d18 <vListInsert>
}
 8005aaa:	e010      	b.n	8005ace <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aac:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <prvAddCurrentTaskToDelayedList+0xc4>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4610      	mov	r0, r2
 8005aba:	f7fe f92d 	bl	8003d18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d202      	bcs.n	8005ace <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ac8:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6013      	str	r3, [r2, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000390 	.word	0x20000390
 8005adc:	2000028c 	.word	0x2000028c
 8005ae0:	20000394 	.word	0x20000394
 8005ae4:	20000378 	.word	0x20000378
 8005ae8:	20000348 	.word	0x20000348
 8005aec:	20000344 	.word	0x20000344
 8005af0:	200003ac 	.word	0x200003ac

08005af4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3b04      	subs	r3, #4
 8005b04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3b04      	subs	r3, #4
 8005b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f023 0201 	bic.w	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3b04      	subs	r3, #4
 8005b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b24:	4a0c      	ldr	r2, [pc, #48]	; (8005b58 <pxPortInitialiseStack+0x64>)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3b14      	subs	r3, #20
 8005b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3b04      	subs	r3, #4
 8005b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f06f 0202 	mvn.w	r2, #2
 8005b42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3b20      	subs	r3, #32
 8005b48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	08005b5d 	.word	0x08005b5d

08005b5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b66:	4b11      	ldr	r3, [pc, #68]	; (8005bac <prvTaskExitError+0x50>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6e:	d009      	beq.n	8005b84 <prvTaskExitError+0x28>
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e7fe      	b.n	8005b82 <prvTaskExitError+0x26>
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b96:	bf00      	nop
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0fc      	beq.n	8005b98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20000010 	.word	0x20000010

08005bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <pxCurrentTCBConst2>)
 8005bb2:	6819      	ldr	r1, [r3, #0]
 8005bb4:	6808      	ldr	r0, [r1, #0]
 8005bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bba:	f380 8809 	msr	PSP, r0
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f380 8811 	msr	BASEPRI, r0
 8005bca:	4770      	bx	lr
 8005bcc:	f3af 8000 	nop.w

08005bd0 <pxCurrentTCBConst2>:
 8005bd0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop

08005bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bd8:	4808      	ldr	r0, [pc, #32]	; (8005bfc <prvPortStartFirstTask+0x24>)
 8005bda:	6800      	ldr	r0, [r0, #0]
 8005bdc:	6800      	ldr	r0, [r0, #0]
 8005bde:	f380 8808 	msr	MSP, r0
 8005be2:	f04f 0000 	mov.w	r0, #0
 8005be6:	f380 8814 	msr	CONTROL, r0
 8005bea:	b662      	cpsie	i
 8005bec:	b661      	cpsie	f
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	df00      	svc	0
 8005bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bfa:	bf00      	nop
 8005bfc:	e000ed08 	.word	0xe000ed08

08005c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c06:	4b44      	ldr	r3, [pc, #272]	; (8005d18 <xPortStartScheduler+0x118>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a44      	ldr	r2, [pc, #272]	; (8005d1c <xPortStartScheduler+0x11c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d109      	bne.n	8005c24 <xPortStartScheduler+0x24>
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	e7fe      	b.n	8005c22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c24:	4b3c      	ldr	r3, [pc, #240]	; (8005d18 <xPortStartScheduler+0x118>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a3d      	ldr	r2, [pc, #244]	; (8005d20 <xPortStartScheduler+0x120>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d109      	bne.n	8005c42 <xPortStartScheduler+0x42>
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e7fe      	b.n	8005c40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c42:	4b38      	ldr	r3, [pc, #224]	; (8005d24 <xPortStartScheduler+0x124>)
 8005c44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	22ff      	movs	r2, #255	; 0xff
 8005c52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	4b30      	ldr	r3, [pc, #192]	; (8005d28 <xPortStartScheduler+0x128>)
 8005c68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c6a:	4b30      	ldr	r3, [pc, #192]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005c6c:	2207      	movs	r2, #7
 8005c6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c70:	e009      	b.n	8005c86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005c72:	4b2e      	ldr	r3, [pc, #184]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	4a2c      	ldr	r2, [pc, #176]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005c7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b80      	cmp	r3, #128	; 0x80
 8005c90:	d0ef      	beq.n	8005c72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c92:	4b26      	ldr	r3, [pc, #152]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1c3 0307 	rsb	r3, r3, #7
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d009      	beq.n	8005cb2 <xPortStartScheduler+0xb2>
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	e7fe      	b.n	8005cb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cb2:	4b1e      	ldr	r3, [pc, #120]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005cba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cbc:	4b1b      	ldr	r3, [pc, #108]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cc4:	4a19      	ldr	r2, [pc, #100]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005cc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cd0:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <xPortStartScheduler+0x130>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <xPortStartScheduler+0x130>)
 8005cd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cdc:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <xPortStartScheduler+0x130>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <xPortStartScheduler+0x130>)
 8005ce2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ce6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ce8:	f000 f8d6 	bl	8005e98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cec:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <xPortStartScheduler+0x134>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cf2:	f000 f8f5 	bl	8005ee0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cf6:	4b10      	ldr	r3, [pc, #64]	; (8005d38 <xPortStartScheduler+0x138>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a0f      	ldr	r2, [pc, #60]	; (8005d38 <xPortStartScheduler+0x138>)
 8005cfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d02:	f7ff ff69 	bl	8005bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d06:	f7ff f981 	bl	800500c <vTaskSwitchContext>
	prvTaskExitError();
 8005d0a:	f7ff ff27 	bl	8005b5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	e000ed00 	.word	0xe000ed00
 8005d1c:	410fc271 	.word	0x410fc271
 8005d20:	410fc270 	.word	0x410fc270
 8005d24:	e000e400 	.word	0xe000e400
 8005d28:	200003b8 	.word	0x200003b8
 8005d2c:	200003bc 	.word	0x200003bc
 8005d30:	e000ed20 	.word	0xe000ed20
 8005d34:	20000010 	.word	0x20000010
 8005d38:	e000ef34 	.word	0xe000ef34

08005d3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d54:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <vPortEnterCritical+0x54>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a0d      	ldr	r2, [pc, #52]	; (8005d90 <vPortEnterCritical+0x54>)
 8005d5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <vPortEnterCritical+0x54>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d10e      	bne.n	8005d84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d66:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <vPortEnterCritical+0x58>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <vPortEnterCritical+0x48>
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	e7fe      	b.n	8005d82 <vPortEnterCritical+0x46>
	}
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	20000010 	.word	0x20000010
 8005d94:	e000ed04 	.word	0xe000ed04

08005d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <vPortExitCritical+0x4c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <vPortExitCritical+0x22>
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	e7fe      	b.n	8005db8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005dba:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <vPortExitCritical+0x4c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	4a08      	ldr	r2, [pc, #32]	; (8005de4 <vPortExitCritical+0x4c>)
 8005dc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dc4:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <vPortExitCritical+0x4c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <vPortExitCritical+0x3e>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000010 	.word	0x20000010
	...

08005df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005df0:	f3ef 8009 	mrs	r0, PSP
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <pxCurrentTCBConst>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	f01e 0f10 	tst.w	lr, #16
 8005e00:	bf08      	it	eq
 8005e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0a:	6010      	str	r0, [r2, #0]
 8005e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e14:	f380 8811 	msr	BASEPRI, r0
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f7ff f8f4 	bl	800500c <vTaskSwitchContext>
 8005e24:	f04f 0000 	mov.w	r0, #0
 8005e28:	f380 8811 	msr	BASEPRI, r0
 8005e2c:	bc09      	pop	{r0, r3}
 8005e2e:	6819      	ldr	r1, [r3, #0]
 8005e30:	6808      	ldr	r0, [r1, #0]
 8005e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e36:	f01e 0f10 	tst.w	lr, #16
 8005e3a:	bf08      	it	eq
 8005e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e40:	f380 8809 	msr	PSP, r0
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	f3af 8000 	nop.w

08005e50 <pxCurrentTCBConst>:
 8005e50:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop

08005e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e70:	f7ff f814 	bl	8004e9c <xTaskIncrementTick>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <SysTick_Handler+0x3c>)
 8005e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	2300      	movs	r3, #0
 8005e84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <vPortSetupTimerInterrupt+0x34>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <vPortSetupTimerInterrupt+0x38>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <vPortSetupTimerInterrupt+0x3c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <vPortSetupTimerInterrupt+0x40>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	099b      	lsrs	r3, r3, #6
 8005eb4:	4a09      	ldr	r2, [pc, #36]	; (8005edc <vPortSetupTimerInterrupt+0x44>)
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eba:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <vPortSetupTimerInterrupt+0x34>)
 8005ebc:	2207      	movs	r2, #7
 8005ebe:	601a      	str	r2, [r3, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	e000e010 	.word	0xe000e010
 8005ed0:	e000e018 	.word	0xe000e018
 8005ed4:	20000004 	.word	0x20000004
 8005ed8:	10624dd3 	.word	0x10624dd3
 8005edc:	e000e014 	.word	0xe000e014

08005ee0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ee0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ef0 <vPortEnableVFP+0x10>
 8005ee4:	6801      	ldr	r1, [r0, #0]
 8005ee6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005eea:	6001      	str	r1, [r0, #0]
 8005eec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005eee:	bf00      	nop
 8005ef0:	e000ed88 	.word	0xe000ed88

08005ef4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005efa:	f3ef 8305 	mrs	r3, IPSR
 8005efe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b0f      	cmp	r3, #15
 8005f04:	d913      	bls.n	8005f2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f06:	4a16      	ldr	r2, [pc, #88]	; (8005f60 <vPortValidateInterruptPriority+0x6c>)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f10:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <vPortValidateInterruptPriority+0x70>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	7afa      	ldrb	r2, [r7, #11]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d209      	bcs.n	8005f2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	e7fe      	b.n	8005f2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f2e:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <vPortValidateInterruptPriority+0x74>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f36:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <vPortValidateInterruptPriority+0x78>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d909      	bls.n	8005f52 <vPortValidateInterruptPriority+0x5e>
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	e7fe      	b.n	8005f50 <vPortValidateInterruptPriority+0x5c>
	}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	e000e3f0 	.word	0xe000e3f0
 8005f64:	200003b8 	.word	0x200003b8
 8005f68:	e000ed0c 	.word	0xe000ed0c
 8005f6c:	200003bc 	.word	0x200003bc

08005f70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f7c:	f7fe fee4 	bl	8004d48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f80:	4b57      	ldr	r3, [pc, #348]	; (80060e0 <pvPortMalloc+0x170>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f88:	f000 f90c 	bl	80061a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f8c:	4b55      	ldr	r3, [pc, #340]	; (80060e4 <pvPortMalloc+0x174>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 808c 	bne.w	80060b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01c      	beq.n	8005fda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d013      	beq.n	8005fda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f023 0307 	bic.w	r3, r3, #7
 8005fb8:	3308      	adds	r3, #8
 8005fba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <pvPortMalloc+0x6a>
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e7fe      	b.n	8005fd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d068      	beq.n	80060b2 <pvPortMalloc+0x142>
 8005fe0:	4b41      	ldr	r3, [pc, #260]	; (80060e8 <pvPortMalloc+0x178>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d863      	bhi.n	80060b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fea:	4b40      	ldr	r3, [pc, #256]	; (80060ec <pvPortMalloc+0x17c>)
 8005fec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fee:	4b3f      	ldr	r3, [pc, #252]	; (80060ec <pvPortMalloc+0x17c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ff4:	e004      	b.n	8006000 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	429a      	cmp	r2, r3
 8006008:	d903      	bls.n	8006012 <pvPortMalloc+0xa2>
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1f1      	bne.n	8005ff6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006012:	4b33      	ldr	r3, [pc, #204]	; (80060e0 <pvPortMalloc+0x170>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006018:	429a      	cmp	r2, r3
 800601a:	d04a      	beq.n	80060b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2208      	movs	r2, #8
 8006022:	4413      	add	r3, r2
 8006024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	2308      	movs	r3, #8
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	429a      	cmp	r2, r3
 800603c:	d91e      	bls.n	800607c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800603e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4413      	add	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <pvPortMalloc+0xf4>
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	e7fe      	b.n	8006062 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	1ad2      	subs	r2, r2, r3
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006076:	69b8      	ldr	r0, [r7, #24]
 8006078:	f000 f8f6 	bl	8006268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800607c:	4b1a      	ldr	r3, [pc, #104]	; (80060e8 <pvPortMalloc+0x178>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <pvPortMalloc+0x178>)
 8006088:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800608a:	4b17      	ldr	r3, [pc, #92]	; (80060e8 <pvPortMalloc+0x178>)
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	4b18      	ldr	r3, [pc, #96]	; (80060f0 <pvPortMalloc+0x180>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d203      	bcs.n	800609e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006096:	4b14      	ldr	r3, [pc, #80]	; (80060e8 <pvPortMalloc+0x178>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <pvPortMalloc+0x180>)
 800609c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	4b10      	ldr	r3, [pc, #64]	; (80060e4 <pvPortMalloc+0x174>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060b2:	f7fe fe57 	bl	8004d64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d009      	beq.n	80060d4 <pvPortMalloc+0x164>
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	e7fe      	b.n	80060d2 <pvPortMalloc+0x162>
	return pvReturn;
 80060d4:	69fb      	ldr	r3, [r7, #28]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3728      	adds	r7, #40	; 0x28
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20003fc8 	.word	0x20003fc8
 80060e4:	20003fd4 	.word	0x20003fd4
 80060e8:	20003fcc 	.word	0x20003fcc
 80060ec:	20003fc0 	.word	0x20003fc0
 80060f0:	20003fd0 	.word	0x20003fd0

080060f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d046      	beq.n	8006194 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006106:	2308      	movs	r3, #8
 8006108:	425b      	negs	r3, r3
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4413      	add	r3, r2
 800610e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	4b20      	ldr	r3, [pc, #128]	; (800619c <vPortFree+0xa8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4013      	ands	r3, r2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <vPortFree+0x42>
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e7fe      	b.n	8006134 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <vPortFree+0x5e>
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	e7fe      	b.n	8006150 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	4b11      	ldr	r3, [pc, #68]	; (800619c <vPortFree+0xa8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d019      	beq.n	8006194 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d115      	bne.n	8006194 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <vPortFree+0xa8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	43db      	mvns	r3, r3
 8006172:	401a      	ands	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006178:	f7fe fde6 	bl	8004d48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <vPortFree+0xac>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4413      	add	r3, r2
 8006186:	4a06      	ldr	r2, [pc, #24]	; (80061a0 <vPortFree+0xac>)
 8006188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800618a:	6938      	ldr	r0, [r7, #16]
 800618c:	f000 f86c 	bl	8006268 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006190:	f7fe fde8 	bl	8004d64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006194:	bf00      	nop
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20003fd4 	.word	0x20003fd4
 80061a0:	20003fcc 	.word	0x20003fcc

080061a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061b0:	4b27      	ldr	r3, [pc, #156]	; (8006250 <prvHeapInit+0xac>)
 80061b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00c      	beq.n	80061d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3307      	adds	r3, #7
 80061c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0307 	bic.w	r3, r3, #7
 80061ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <prvHeapInit+0xac>)
 80061d4:	4413      	add	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061dc:	4a1d      	ldr	r2, [pc, #116]	; (8006254 <prvHeapInit+0xb0>)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061e2:	4b1c      	ldr	r3, [pc, #112]	; (8006254 <prvHeapInit+0xb0>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	4413      	add	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061f0:	2208      	movs	r2, #8
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1a9b      	subs	r3, r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0307 	bic.w	r3, r3, #7
 80061fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a15      	ldr	r2, [pc, #84]	; (8006258 <prvHeapInit+0xb4>)
 8006204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <prvHeapInit+0xb4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2200      	movs	r2, #0
 800620c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800620e:	4b12      	ldr	r3, [pc, #72]	; (8006258 <prvHeapInit+0xb4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	1ad2      	subs	r2, r2, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006224:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <prvHeapInit+0xb4>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	4a0a      	ldr	r2, [pc, #40]	; (800625c <prvHeapInit+0xb8>)
 8006232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4a09      	ldr	r2, [pc, #36]	; (8006260 <prvHeapInit+0xbc>)
 800623a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800623c:	4b09      	ldr	r3, [pc, #36]	; (8006264 <prvHeapInit+0xc0>)
 800623e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006242:	601a      	str	r2, [r3, #0]
}
 8006244:	bf00      	nop
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	200003c0 	.word	0x200003c0
 8006254:	20003fc0 	.word	0x20003fc0
 8006258:	20003fc8 	.word	0x20003fc8
 800625c:	20003fd0 	.word	0x20003fd0
 8006260:	20003fcc 	.word	0x20003fcc
 8006264:	20003fd4 	.word	0x20003fd4

08006268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006270:	4b28      	ldr	r3, [pc, #160]	; (8006314 <prvInsertBlockIntoFreeList+0xac>)
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e002      	b.n	800627c <prvInsertBlockIntoFreeList+0x14>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	429a      	cmp	r2, r3
 8006284:	d8f7      	bhi.n	8006276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	4413      	add	r3, r2
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	d108      	bne.n	80062aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	441a      	add	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	441a      	add	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d118      	bne.n	80062f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b15      	ldr	r3, [pc, #84]	; (8006318 <prvInsertBlockIntoFreeList+0xb0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d00d      	beq.n	80062e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	441a      	add	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e008      	b.n	80062f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <prvInsertBlockIntoFreeList+0xb0>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	e003      	b.n	80062f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d002      	beq.n	8006306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20003fc0 	.word	0x20003fc0
 8006318:	20003fc8 	.word	0x20003fc8

0800631c <__libc_init_array>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4e0d      	ldr	r6, [pc, #52]	; (8006354 <__libc_init_array+0x38>)
 8006320:	4c0d      	ldr	r4, [pc, #52]	; (8006358 <__libc_init_array+0x3c>)
 8006322:	1ba4      	subs	r4, r4, r6
 8006324:	10a4      	asrs	r4, r4, #2
 8006326:	2500      	movs	r5, #0
 8006328:	42a5      	cmp	r5, r4
 800632a:	d109      	bne.n	8006340 <__libc_init_array+0x24>
 800632c:	4e0b      	ldr	r6, [pc, #44]	; (800635c <__libc_init_array+0x40>)
 800632e:	4c0c      	ldr	r4, [pc, #48]	; (8006360 <__libc_init_array+0x44>)
 8006330:	f000 f82c 	bl	800638c <_init>
 8006334:	1ba4      	subs	r4, r4, r6
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	2500      	movs	r5, #0
 800633a:	42a5      	cmp	r5, r4
 800633c:	d105      	bne.n	800634a <__libc_init_array+0x2e>
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006344:	4798      	blx	r3
 8006346:	3501      	adds	r5, #1
 8006348:	e7ee      	b.n	8006328 <__libc_init_array+0xc>
 800634a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800634e:	4798      	blx	r3
 8006350:	3501      	adds	r5, #1
 8006352:	e7f2      	b.n	800633a <__libc_init_array+0x1e>
 8006354:	0800644c 	.word	0x0800644c
 8006358:	0800644c 	.word	0x0800644c
 800635c:	0800644c 	.word	0x0800644c
 8006360:	08006450 	.word	0x08006450

08006364 <memcpy>:
 8006364:	b510      	push	{r4, lr}
 8006366:	1e43      	subs	r3, r0, #1
 8006368:	440a      	add	r2, r1
 800636a:	4291      	cmp	r1, r2
 800636c:	d100      	bne.n	8006370 <memcpy+0xc>
 800636e:	bd10      	pop	{r4, pc}
 8006370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006378:	e7f7      	b.n	800636a <memcpy+0x6>

0800637a <memset>:
 800637a:	4402      	add	r2, r0
 800637c:	4603      	mov	r3, r0
 800637e:	4293      	cmp	r3, r2
 8006380:	d100      	bne.n	8006384 <memset+0xa>
 8006382:	4770      	bx	lr
 8006384:	f803 1b01 	strb.w	r1, [r3], #1
 8006388:	e7f9      	b.n	800637e <memset+0x4>
	...

0800638c <_init>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr

08006398 <_fini>:
 8006398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639a:	bf00      	nop
 800639c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639e:	bc08      	pop	{r3}
 80063a0:	469e      	mov	lr, r3
 80063a2:	4770      	bx	lr
